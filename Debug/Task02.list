
Task02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005530  08005530  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000498c  20000084  080055bc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a10  080055bc  00024a10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ec9  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029af  00000000  00000000  00032f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00036580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000407f  00000000  00000000  000370b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dacf  00000000  00000000  0003b137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6cfc  00000000  00000000  00048c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000392c  00000000  00000000  0013f958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	080053a4 	.word	0x080053a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	080053a4 	.word	0x080053a4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fa4b 	bl	8000a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f826 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f880 	bl	80006e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f001 f9e4 	bl	80019b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <main+0x3c>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <main+0x40>)
 80005f2:	f001 fa49 	bl	8001a88 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a08      	ldr	r2, [pc, #32]	; (800061c <main+0x44>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, (void*)&user1, &myTask02_attributes);
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <main+0x48>)
 80005fe:	4909      	ldr	r1, [pc, #36]	; (8000624 <main+0x4c>)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <main+0x50>)
 8000602:	f001 fa41 	bl	8001a88 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a08      	ldr	r2, [pc, #32]	; (800062c <main+0x54>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f001 fa06 	bl	8001a1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x38>
 8000612:	bf00      	nop
 8000614:	08005438 	.word	0x08005438
 8000618:	0800074d 	.word	0x0800074d
 800061c:	200049b4 	.word	0x200049b4
 8000620:	0800545c 	.word	0x0800545c
 8000624:	20000000 	.word	0x20000000
 8000628:	08000775 	.word	0x08000775
 800062c:	200049b8 	.word	0x200049b8

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fedc 	bl	80043fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xb0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xb0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xb0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemClock_Config+0xb4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <SystemClock_Config+0xb4>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemClock_Config+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd31 	bl	8001104 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f88c 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ffca 	bl	8001660 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f877 	bl	80007c4 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_GPIO_Init+0x5c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a10      	ldr	r2, [pc, #64]	; (8000744 <MX_GPIO_Init+0x5c>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_GPIO_Init+0x5c>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gled_Pin|rled_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f244 0101 	movw	r1, #16385	; 0x4001
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <MX_GPIO_Init+0x60>)
 800071c:	f000 fcbe 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : gled_Pin rled_Pin */
  GPIO_InitStruct.Pin = gled_Pin|rled_Pin;
 8000720:	f244 0301 	movw	r3, #16385	; 0x4001
 8000724:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_GPIO_Init+0x60>)
 8000738:	f000 fb04 	bl	8000d44 <HAL_GPIO_Init>

}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020400 	.word	0x40020400

0800074c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  printf("task 1 is running\n");
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <StartDefaultTask+0x20>)
 8000756:	f003 fedf 	bl	8004518 <puts>
	  HAL_GPIO_TogglePin(gled_GPIO_Port, gled_Pin);
 800075a:	2101      	movs	r1, #1
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <StartDefaultTask+0x24>)
 800075e:	f000 fcb6 	bl	80010ce <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000766:	f000 f9e3 	bl	8000b30 <HAL_Delay>
	  printf("task 1 is running\n");
 800076a:	e7f3      	b.n	8000754 <StartDefaultTask+0x8>
 800076c:	080053d4 	.word	0x080053d4
 8000770:	40020400 	.word	0x40020400

08000774 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	struct user *user1= (struct user*) argument;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
		while(1)
		{
	  printf("task02 is running\n");
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <StartTask02+0x40>)
 8000782:	f003 fec9 	bl	8004518 <puts>
	  HAL_GPIO_TogglePin(rled_GPIO_Port, rled_Pin);
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <StartTask02+0x44>)
 800078c:	f000 fc9f 	bl	80010ce <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f000 f9cc 	bl	8000b30 <HAL_Delay>

	  printf("user id is %d\n",user1->u_id);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <StartTask02+0x48>)
 80007a0:	f003 fe34 	bl	800440c <iprintf>
	  printf("user name is %s\n",user1->name);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3304      	adds	r3, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <StartTask02+0x4c>)
 80007ac:	f003 fe2e 	bl	800440c <iprintf>
	  printf("task02 is running\n");
 80007b0:	e7e6      	b.n	8000780 <StartTask02+0xc>
 80007b2:	bf00      	nop
 80007b4:	080053e8 	.word	0x080053e8
 80007b8:	40020400 	.word	0x40020400
 80007bc:	080053fc 	.word	0x080053fc
 80007c0:	0800540c 	.word	0x0800540c

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	f06f 0001 	mvn.w	r0, #1
 800080e:	f000 fa70 	bl	8000cf2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f94e 	bl	8000af0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000854:	f002 fd3e 	bl	80032d4 <xTaskGetSchedulerState>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d001      	beq.n	8000862 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800085e:	f003 fb1b 	bl	8003e98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <ITM_SendChar+0x48>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <ITM_SendChar+0x48>)
 8000878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800087c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <ITM_SendChar+0x4c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <ITM_SendChar+0x4c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800088a:	bf00      	nop
 800088c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f8      	beq.n	800088c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800089a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	6013      	str	r3, [r2, #0]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000edfc 	.word	0xe000edfc
 80008b4:	e0000e00 	.word	0xe0000e00

080008b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e00a      	b.n	80008e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ca:	f3af 8000 	nop.w
 80008ce:	4601      	mov	r1, r0
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbf0      	blt.n	80008ca <_read+0x12>
	}

return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e009      	b.n	8000918 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffab 	bl	8000868 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf1      	blt.n	8000904 <_write+0x12>
	}
	return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_close>:

int _close(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000952:	605a      	str	r2, [r3, #4]
	return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_isatty>:

int _isatty(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	return 1;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f003 fce2 	bl	800438c <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20080000 	.word	0x20080000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	200000a0 	.word	0x200000a0
 80009fc:	20004a10 	.word	0x20004a10

08000a00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f003 fca1 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fdbf 	bl	80005d8 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a68:	08005538 	.word	0x08005538
  ldr r2, =_sbss
 8000a6c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a70:	20004a10 	.word	0x20004a10

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>

08000a76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 f92e 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f000 f805 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a86:	f7ff fea3 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f93b 	bl	8000d2a <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f911 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000010 	.word	0x20000010
 8000ae8:	20000018 	.word	0x20000018
 8000aec:	20000014 	.word	0x20000014

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000018 	.word	0x20000018
 8000b14:	200049bc 	.word	0x200049bc

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200049bc 	.word	0x200049bc

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ffee 	bl	8000b18 <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffde 	bl	8000b18 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000018 	.word	0x20000018

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	05fa0000 	.word	0x05fa0000

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff47 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5c 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb0 	bl	8000c98 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e175      	b.n	8001050 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8164 	bne.w	800104a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x56>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80be 	beq.w	800104a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b66      	ldr	r3, [pc, #408]	; (8001068 <HAL_GPIO_Init+0x324>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a65      	ldr	r2, [pc, #404]	; (8001068 <HAL_GPIO_Init+0x324>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b63      	ldr	r3, [pc, #396]	; (8001068 <HAL_GPIO_Init+0x324>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ee6:	4a61      	ldr	r2, [pc, #388]	; (800106c <HAL_GPIO_Init+0x328>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a58      	ldr	r2, [pc, #352]	; (8001070 <HAL_GPIO_Init+0x32c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d037      	beq.n	8000f82 <HAL_GPIO_Init+0x23e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a57      	ldr	r2, [pc, #348]	; (8001074 <HAL_GPIO_Init+0x330>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d031      	beq.n	8000f7e <HAL_GPIO_Init+0x23a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a56      	ldr	r2, [pc, #344]	; (8001078 <HAL_GPIO_Init+0x334>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d02b      	beq.n	8000f7a <HAL_GPIO_Init+0x236>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a55      	ldr	r2, [pc, #340]	; (800107c <HAL_GPIO_Init+0x338>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d025      	beq.n	8000f76 <HAL_GPIO_Init+0x232>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a54      	ldr	r2, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x33c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01f      	beq.n	8000f72 <HAL_GPIO_Init+0x22e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a53      	ldr	r2, [pc, #332]	; (8001084 <HAL_GPIO_Init+0x340>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x22a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x344>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x226>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a51      	ldr	r2, [pc, #324]	; (800108c <HAL_GPIO_Init+0x348>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x222>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <HAL_GPIO_Init+0x34c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x21e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4f      	ldr	r2, [pc, #316]	; (8001094 <HAL_GPIO_Init+0x350>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x21a>
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	e012      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f5e:	230a      	movs	r3, #10
 8000f60:	e010      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f62:	2308      	movs	r3, #8
 8000f64:	e00e      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00c      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e00a      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x240>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f94:	4935      	ldr	r1, [pc, #212]	; (800106c <HAL_GPIO_Init+0x328>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <HAL_GPIO_Init+0x354>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc6:	4a34      	ldr	r2, [pc, #208]	; (8001098 <HAL_GPIO_Init+0x354>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_GPIO_Init+0x354>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <HAL_GPIO_Init+0x354>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_GPIO_Init+0x354>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_GPIO_Init+0x354>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_GPIO_Init+0x354>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_GPIO_Init+0x354>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f ae86 	bls.w	8000d64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40013800 	.word	0x40013800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400
 8001078:	40020800 	.word	0x40020800
 800107c:	40020c00 	.word	0x40020c00
 8001080:	40021000 	.word	0x40021000
 8001084:	40021400 	.word	0x40021400
 8001088:	40021800 	.word	0x40021800
 800108c:	40021c00 	.word	0x40021c00
 8001090:	40022000 	.word	0x40022000
 8001094:	40022400 	.word	0x40022400
 8001098:	40013c00 	.word	0x40013c00

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e0:	887a      	ldrh	r2, [r7, #2]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4013      	ands	r3, r2
 80010e6:	041a      	lsls	r2, r3, #16
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	400b      	ands	r3, r1
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e29b      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8087 	beq.w	8001236 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001128:	4b96      	ldr	r3, [pc, #600]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b04      	cmp	r3, #4
 8001132:	d00c      	beq.n	800114e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001134:	4b93      	ldr	r3, [pc, #588]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b08      	cmp	r3, #8
 800113e:	d112      	bne.n	8001166 <HAL_RCC_OscConfig+0x62>
 8001140:	4b90      	ldr	r3, [pc, #576]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800114c:	d10b      	bne.n	8001166 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114e:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d06c      	beq.n	8001234 <HAL_RCC_OscConfig+0x130>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d168      	bne.n	8001234 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e275      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116e:	d106      	bne.n	800117e <HAL_RCC_OscConfig+0x7a>
 8001170:	4b84      	ldr	r3, [pc, #528]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a83      	ldr	r2, [pc, #524]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e02e      	b.n	80011dc <HAL_RCC_OscConfig+0xd8>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x9c>
 8001186:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a7e      	ldr	r2, [pc, #504]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7b      	ldr	r2, [pc, #492]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e01d      	b.n	80011dc <HAL_RCC_OscConfig+0xd8>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0xc0>
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b73      	ldr	r3, [pc, #460]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a72      	ldr	r2, [pc, #456]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0xd8>
 80011c4:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a6e      	ldr	r2, [pc, #440]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a6b      	ldr	r2, [pc, #428]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80011d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc98 	bl	8000b18 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fc94 	bl	8000b18 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e229      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b61      	ldr	r3, [pc, #388]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0xe8>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fc84 	bl	8000b18 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fc80 	bl	8000b18 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e215      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	4b57      	ldr	r3, [pc, #348]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x110>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d069      	beq.n	8001316 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001242:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124e:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b08      	cmp	r3, #8
 8001258:	d11c      	bne.n	8001294 <HAL_RCC_OscConfig+0x190>
 800125a:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d116      	bne.n	8001294 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <HAL_RCC_OscConfig+0x17a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d001      	beq.n	800127e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e1e9      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	493d      	ldr	r1, [pc, #244]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	e040      	b.n	8001316 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d023      	beq.n	80012e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a38      	ldr	r2, [pc, #224]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc36 	bl	8000b18 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc32 	bl	8000b18 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1c7      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4929      	ldr	r1, [pc, #164]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
 80012e2:	e018      	b.n	8001316 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc12 	bl	8000b18 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fc0e 	bl	8000b18 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1a3      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d038      	beq.n	8001394 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d019      	beq.n	800135e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800132c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001336:	f7ff fbef 	bl	8000b18 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fbeb 	bl	8000b18 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e180      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x23a>
 800135c:	e01a      	b.n	8001394 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136a:	f7ff fbd5 	bl	8000b18 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fbd1 	bl	8000b18 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d903      	bls.n	8001388 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e166      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
 8001384:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001388:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800138a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ee      	bne.n	8001372 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80a4 	beq.w	80014ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b8c      	ldr	r3, [pc, #560]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b89      	ldr	r3, [pc, #548]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a88      	ldr	r2, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b86      	ldr	r3, [pc, #536]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ca:	4b83      	ldr	r3, [pc, #524]	; (80015d8 <HAL_RCC_OscConfig+0x4d4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013d6:	4b80      	ldr	r3, [pc, #512]	; (80015d8 <HAL_RCC_OscConfig+0x4d4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7f      	ldr	r2, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x4d4>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb99 	bl	8000b18 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ea:	f7ff fb95 	bl	8000b18 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e12a      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fc:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x4d4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x31a>
 8001410:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a6f      	ldr	r2, [pc, #444]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
 800141c:	e02d      	b.n	800147a <HAL_RCC_OscConfig+0x376>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x33c>
 8001426:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142a:	4a6a      	ldr	r2, [pc, #424]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6713      	str	r3, [r2, #112]	; 0x70
 8001432:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	4a67      	ldr	r2, [pc, #412]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6713      	str	r3, [r2, #112]	; 0x70
 800143e:	e01c      	b.n	800147a <HAL_RCC_OscConfig+0x376>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b05      	cmp	r3, #5
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0x35e>
 8001448:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800144a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144c:	4a61      	ldr	r2, [pc, #388]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6713      	str	r3, [r2, #112]	; 0x70
 8001454:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001458:	4a5e      	ldr	r2, [pc, #376]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6713      	str	r3, [r2, #112]	; 0x70
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0x376>
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a5b      	ldr	r2, [pc, #364]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
 800146e:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001474:	f023 0304 	bic.w	r3, r3, #4
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d015      	beq.n	80014ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fb49 	bl	8000b18 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb45 	bl	8000b18 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0d8      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0ee      	beq.n	800148a <HAL_RCC_OscConfig+0x386>
 80014ac:	e014      	b.n	80014d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fb33 	bl	8000b18 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fb2f 	bl	8000b18 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0c2      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ee      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d105      	bne.n	80014ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a3c      	ldr	r2, [pc, #240]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80014e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80ae 	beq.w	8001650 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d06d      	beq.n	80015dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d14b      	bne.n	80015a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fb00 	bl	8000b18 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fafc 	bl	8000b18 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e091      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69da      	ldr	r2, [r3, #28]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	019b      	lsls	r3, r3, #6
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	3b01      	subs	r3, #1
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	071b      	lsls	r3, r3, #28
 8001566:	491b      	ldr	r1, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff face 	bl	8000b18 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001580:	f7ff faca 	bl	8000b18 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e05f      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x47c>
 800159e:	e057      	b.n	8001650 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fab4 	bl	8000b18 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fab0 	bl	8000b18 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e045      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_RCC_OscConfig+0x4d0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4b0>
 80015d2:	e03d      	b.n	8001650 <HAL_RCC_OscConfig+0x54c>
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_RCC_OscConfig+0x558>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d030      	beq.n	800164c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d129      	bne.n	800164c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d122      	bne.n	800164c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800160c:	4013      	ands	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001612:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001614:	4293      	cmp	r3, r2
 8001616:	d119      	bne.n	800164c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	085b      	lsrs	r3, r3, #1
 8001624:	3b01      	subs	r3, #1
 8001626:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d10f      	bne.n	800164c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 020f 	bic.w	r2, r3, #15
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80016c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80016de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001754:	f7ff f9e0 	bl	8000b18 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f9dc 	bl	8000b18 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 020f 	bic.w	r2, r3, #15
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1cc>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1d0>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f93c 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00
 8001828:	40023800 	.word	0x40023800
 800182c:	08005480 	.word	0x08005480
 8001830:	20000010 	.word	0x20000010
 8001834:	20000014 	.word	0x20000014

08001838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800183e:	2100      	movs	r1, #0
 8001840:	6079      	str	r1, [r7, #4]
 8001842:	2100      	movs	r1, #0
 8001844:	60f9      	str	r1, [r7, #12]
 8001846:	2100      	movs	r1, #0
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800184a:	2100      	movs	r1, #0
 800184c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800184e:	4952      	ldr	r1, [pc, #328]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 8001850:	6889      	ldr	r1, [r1, #8]
 8001852:	f001 010c 	and.w	r1, r1, #12
 8001856:	2908      	cmp	r1, #8
 8001858:	d00d      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x3e>
 800185a:	2908      	cmp	r1, #8
 800185c:	f200 8094 	bhi.w	8001988 <HAL_RCC_GetSysClockFreq+0x150>
 8001860:	2900      	cmp	r1, #0
 8001862:	d002      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x32>
 8001864:	2904      	cmp	r1, #4
 8001866:	d003      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x38>
 8001868:	e08e      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800186a:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_GetSysClockFreq+0x164>)
 800186c:	60bb      	str	r3, [r7, #8]
      break;
 800186e:	e08e      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001872:	60bb      	str	r3, [r7, #8]
      break;
 8001874:	e08b      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001876:	4948      	ldr	r1, [pc, #288]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 8001878:	6849      	ldr	r1, [r1, #4]
 800187a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800187e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001880:	4945      	ldr	r1, [pc, #276]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 8001882:	6849      	ldr	r1, [r1, #4]
 8001884:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001888:	2900      	cmp	r1, #0
 800188a:	d024      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188c:	4942      	ldr	r1, [pc, #264]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 800188e:	6849      	ldr	r1, [r1, #4]
 8001890:	0989      	lsrs	r1, r1, #6
 8001892:	4608      	mov	r0, r1
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	f240 14ff 	movw	r4, #511	; 0x1ff
 800189c:	f04f 0500 	mov.w	r5, #0
 80018a0:	ea00 0204 	and.w	r2, r0, r4
 80018a4:	ea01 0305 	and.w	r3, r1, r5
 80018a8:	493d      	ldr	r1, [pc, #244]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80018aa:	fb01 f003 	mul.w	r0, r1, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	fb01 f102 	mul.w	r1, r1, r2
 80018b4:	1844      	adds	r4, r0, r1
 80018b6:	493a      	ldr	r1, [pc, #232]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80018b8:	fba2 0101 	umull	r0, r1, r2, r1
 80018bc:	1863      	adds	r3, r4, r1
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	f7fe fd0a 	bl	80002e0 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e04a      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	461a      	mov	r2, r3
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	ea02 0400 	and.w	r4, r2, r0
 80018ee:	ea03 0501 	and.w	r5, r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	014b      	lsls	r3, r1, #5
 8001900:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001904:	0142      	lsls	r2, r0, #5
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	1b00      	subs	r0, r0, r4
 800190c:	eb61 0105 	sbc.w	r1, r1, r5
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	018b      	lsls	r3, r1, #6
 800191a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800191e:	0182      	lsls	r2, r0, #6
 8001920:	1a12      	subs	r2, r2, r0
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	00d9      	lsls	r1, r3, #3
 8001930:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001934:	00d0      	lsls	r0, r2, #3
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	1912      	adds	r2, r2, r4
 800193c:	eb45 0303 	adc.w	r3, r5, r3
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	0299      	lsls	r1, r3, #10
 800194a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800194e:	0290      	lsls	r0, r2, #10
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	461a      	mov	r2, r3
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f7fe fcbe 	bl	80002e0 <__aeabi_uldivmod>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4613      	mov	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_GetSysClockFreq+0x160>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	3301      	adds	r3, #1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	60bb      	str	r3, [r7, #8]
      break;
 8001986:	e002      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_RCC_GetSysClockFreq+0x164>)
 800198a:	60bb      	str	r3, [r7, #8]
      break;
 800198c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198e:	68bb      	ldr	r3, [r7, #8]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bdb0      	pop	{r4, r5, r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	00f42400 	.word	0x00f42400
 80019a0:	017d7840 	.word	0x017d7840

080019a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019ba:	f3ef 8305 	mrs	r3, IPSR
 80019be:	60bb      	str	r3, [r7, #8]
  return(result);
 80019c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10f      	bne.n	80019e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019c6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ca:	607b      	str	r3, [r7, #4]
  return(result);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019d2:	f3ef 8311 	mrs	r3, BASEPRI
 80019d6:	603b      	str	r3, [r7, #0]
  return(result);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <osKernelInitialize+0x3a>
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <osKernelInitialize+0x64>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d103      	bne.n	80019ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80019e6:	f06f 0305 	mvn.w	r3, #5
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e00c      	b.n	8001a08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <osKernelInitialize+0x64>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <osKernelInitialize+0x64>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e002      	b.n	8001a08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200000a4 	.word	0x200000a4

08001a1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a22:	f3ef 8305 	mrs	r3, IPSR
 8001a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a32:	607b      	str	r3, [r7, #4]
  return(result);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a3a:	f3ef 8311 	mrs	r3, BASEPRI
 8001a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <osKernelStart+0x3a>
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <osKernelStart+0x68>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d103      	bne.n	8001a56 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a4e:	f06f 0305 	mvn.w	r3, #5
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e010      	b.n	8001a78 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <osKernelStart+0x68>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d109      	bne.n	8001a72 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001a5e:	f7ff ffa1 	bl	80019a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <osKernelStart+0x68>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001a68:	f001 f80e 	bl	8002a88 <vTaskStartScheduler>
      stat = osOK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e002      	b.n	8001a78 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a78:	68fb      	ldr	r3, [r7, #12]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200000a4 	.word	0x200000a4

08001a88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	; 0x40
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a98:	f3ef 8305 	mrs	r3, IPSR
 8001a9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a9e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 808f 	bne.w	8001bc4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8001aaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ab6:	617b      	str	r3, [r7, #20]
  return(result);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <osThreadNew+0x3e>
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <osThreadNew+0x148>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d07e      	beq.n	8001bc4 <osThreadNew+0x13c>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d07b      	beq.n	8001bc4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001ad0:	2318      	movs	r3, #24
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d045      	beq.n	8001b70 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <osThreadNew+0x6a>
        name = attr->name;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <osThreadNew+0x90>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	2b38      	cmp	r3, #56	; 0x38
 8001b0a:	d805      	bhi.n	8001b18 <osThreadNew+0x90>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <osThreadNew+0x94>
        return (NULL);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e054      	b.n	8001bc6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00e      	beq.n	8001b52 <osThreadNew+0xca>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b5b      	cmp	r3, #91	; 0x5b
 8001b3a:	d90a      	bls.n	8001b52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <osThreadNew+0xca>
        mem = 1;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	e010      	b.n	8001b74 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <osThreadNew+0xec>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d108      	bne.n	8001b74 <osThreadNew+0xec>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d104      	bne.n	8001b74 <osThreadNew+0xec>
          mem = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
 8001b6e:	e001      	b.n	8001b74 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d110      	bne.n	8001b9c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b82:	9202      	str	r2, [sp, #8]
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fddf 	bl	8002754 <xTaskCreateStatic>
 8001b96:	4603      	mov	r3, r0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	e013      	b.n	8001bc4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d110      	bne.n	8001bc4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fe30 	bl	800281a <xTaskCreate>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d001      	beq.n	8001bc4 <osThreadNew+0x13c>
          hTask = NULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001bc4:	693b      	ldr	r3, [r7, #16]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3730      	adds	r7, #48	; 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200000a4 	.word	0x200000a4

08001bd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <vApplicationGetIdleTaskMemory+0x2c>)
 8001be4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <vApplicationGetIdleTaskMemory+0x30>)
 8001bea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200000a8 	.word	0x200000a8
 8001c04:	20000104 	.word	0x20000104

08001c08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <vApplicationGetTimerTaskMemory+0x2c>)
 8001c18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <vApplicationGetTimerTaskMemory+0x30>)
 8001c1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	20000304 	.word	0x20000304
 8001c38:	20000360 	.word	0x20000360

08001c3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f103 0208 	add.w	r2, r3, #8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f103 0208 	add.w	r2, r3, #8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f103 0208 	add.w	r2, r3, #8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d103      	bne.n	8001cfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e00c      	b.n	8001d18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3308      	adds	r3, #8
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e002      	b.n	8001d0c <vListInsert+0x2e>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d2f6      	bcs.n	8001d06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6892      	ldr	r2, [r2, #8]
 8001d66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6852      	ldr	r2, [r2, #4]
 8001d70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d103      	bne.n	8001d84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10c      	bne.n	8001dd2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	b672      	cpsid	i
 8001dbe:	f383 8811 	msr	BASEPRI, r3
 8001dc2:	f3bf 8f6f 	isb	sy
 8001dc6:	f3bf 8f4f 	dsb	sy
 8001dca:	b662      	cpsie	i
 8001dcc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001dce:	bf00      	nop
 8001dd0:	e7fe      	b.n	8001dd0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001dd2:	f001 ffcb 	bl	8003d6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	441a      	add	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	3b01      	subs	r3, #1
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	441a      	add	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	22ff      	movs	r2, #255	; 0xff
 8001e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	22ff      	movs	r2, #255	; 0xff
 8001e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <xQueueGenericReset+0x98>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00f      	beq.n	8001e50 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3310      	adds	r3, #16
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 f88d 	bl	8002f54 <xTaskRemoveFromEventList>
 8001e3a:	e009      	b.n	8001e50 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3310      	adds	r3, #16
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fefb 	bl	8001c3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3324      	adds	r3, #36	; 0x24
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fef6 	bl	8001c3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e50:	f001 ffc0 	bl	8003dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b08e      	sub	sp, #56	; 0x38
 8001e62:	af02      	add	r7, sp, #8
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8001e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e76:	b672      	cpsid	i
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	b662      	cpsie	i
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e88:	bf00      	nop
 8001e8a:	e7fe      	b.n	8001e8a <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8001e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e96:	b672      	cpsid	i
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	b662      	cpsie	i
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ea8:	bf00      	nop
 8001eaa:	e7fe      	b.n	8001eaa <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <xQueueGenericCreateStatic+0x5a>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <xQueueGenericCreateStatic+0x5e>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <xQueueGenericCreateStatic+0x60>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	b672      	cpsid	i
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	b662      	cpsie	i
 8001ed6:	623b      	str	r3, [r7, #32]
}
 8001ed8:	bf00      	nop
 8001eda:	e7fe      	b.n	8001eda <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <xQueueGenericCreateStatic+0x8a>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <xQueueGenericCreateStatic+0x8e>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <xQueueGenericCreateStatic+0x90>
 8001eec:	2300      	movs	r3, #0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8001ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef6:	b672      	cpsid	i
 8001ef8:	f383 8811 	msr	BASEPRI, r3
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	b662      	cpsie	i
 8001f06:	61fb      	str	r3, [r7, #28]
}
 8001f08:	bf00      	nop
 8001f0a:	e7fe      	b.n	8001f0a <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f0c:	2350      	movs	r3, #80	; 0x50
 8001f0e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b50      	cmp	r3, #80	; 0x50
 8001f14:	d00c      	beq.n	8001f30 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1a:	b672      	cpsid	i
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	b662      	cpsie	i
 8001f2a:	61bb      	str	r3, [r7, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	e7fe      	b.n	8001f2e <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f44:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f805 	bl	8001f62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3730      	adds	r7, #48	; 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e002      	b.n	8001f84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f90:	2101      	movs	r1, #1
 8001f92:	69b8      	ldr	r0, [r7, #24]
 8001f94:	f7ff ff06 	bl	8001da4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	; 0x38
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <xQueueGenericSend+0x36>
	__asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	b672      	cpsid	i
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	b662      	cpsie	i
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001fda:	bf00      	nop
 8001fdc:	e7fe      	b.n	8001fdc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <xQueueGenericSend+0x44>
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <xQueueGenericSend+0x48>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <xQueueGenericSend+0x4a>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <xQueueGenericSend+0x68>
	__asm volatile
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	b672      	cpsid	i
 8001ffc:	f383 8811 	msr	BASEPRI, r3
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	b662      	cpsie	i
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800200c:	bf00      	nop
 800200e:	e7fe      	b.n	800200e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d103      	bne.n	800201e <xQueueGenericSend+0x76>
 8002016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <xQueueGenericSend+0x7a>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <xQueueGenericSend+0x7c>
 8002022:	2300      	movs	r3, #0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10c      	bne.n	8002042 <xQueueGenericSend+0x9a>
	__asm volatile
 8002028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202c:	b672      	cpsid	i
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	b662      	cpsie	i
 800203c:	623b      	str	r3, [r7, #32]
}
 800203e:	bf00      	nop
 8002040:	e7fe      	b.n	8002040 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002042:	f001 f947 	bl	80032d4 <xTaskGetSchedulerState>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <xQueueGenericSend+0xaa>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <xQueueGenericSend+0xae>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <xQueueGenericSend+0xb0>
 8002056:	2300      	movs	r3, #0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10c      	bne.n	8002076 <xQueueGenericSend+0xce>
	__asm volatile
 800205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002060:	b672      	cpsid	i
 8002062:	f383 8811 	msr	BASEPRI, r3
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	f3bf 8f4f 	dsb	sy
 800206e:	b662      	cpsie	i
 8002070:	61fb      	str	r3, [r7, #28]
}
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002076:	f001 fe79 	bl	8003d6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <xQueueGenericSend+0xe4>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d112      	bne.n	80020b2 <xQueueGenericSend+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002092:	f000 f9f1 	bl	8002478 <prvCopyDataToQueue>
 8002096:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	3324      	adds	r3, #36	; 0x24
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 ff55 	bl	8002f54 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020aa:	f001 fe93 	bl	8003dd4 <vPortExitCritical>
				return pdPASS;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e062      	b.n	8002178 <xQueueGenericSend+0x1d0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d103      	bne.n	80020c0 <xQueueGenericSend+0x118>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020b8:	f001 fe8c 	bl	8003dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	e05b      	b.n	8002178 <xQueueGenericSend+0x1d0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <xQueueGenericSend+0x12c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 ffa8 	bl	8003020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020d4:	f001 fe7e 	bl	8003dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020d8:	f000 fd40 	bl	8002b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020dc:	f001 fe46 	bl	8003d6c <vPortEnterCritical>
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <xQueueGenericSend+0x14e>
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d103      	bne.n	800210c <xQueueGenericSend+0x164>
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800210c:	f001 fe62 	bl	8003dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002110:	1d3a      	adds	r2, r7, #4
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f000 ff97 	bl	800304c <xTaskCheckForTimeOut>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d123      	bne.n	800216c <xQueueGenericSend+0x1c4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002126:	f000 fa9f 	bl	8002668 <prvIsQueueFull>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d017      	beq.n	8002160 <xQueueGenericSend+0x1b8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	3310      	adds	r3, #16
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f000 feb7 	bl	8002eac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800213e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002140:	f000 fa2a 	bl	8002598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002144:	f000 fd18 	bl	8002b78 <xTaskResumeAll>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d193      	bne.n	8002076 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <xQueueGenericSend+0x1d8>)
 8002150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	e78a      	b.n	8002076 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002162:	f000 fa19 	bl	8002598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002166:	f000 fd07 	bl	8002b78 <xTaskResumeAll>
 800216a:	e784      	b.n	8002076 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800216c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800216e:	f000 fa13 	bl	8002598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002172:	f000 fd01 	bl	8002b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002176:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002178:	4618      	mov	r0, r3
 800217a:	3738      	adds	r7, #56	; 0x38
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	e000ed04 	.word	0xe000ed04

08002184 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10c      	bne.n	80021b6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	b672      	cpsid	i
 80021a2:	f383 8811 	msr	BASEPRI, r3
 80021a6:	f3bf 8f6f 	isb	sy
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	b662      	cpsie	i
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <xQueueGenericSendFromISR+0x40>
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <xQueueGenericSendFromISR+0x44>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <xQueueGenericSendFromISR+0x46>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	b672      	cpsid	i
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	b662      	cpsie	i
 80021e2:	623b      	str	r3, [r7, #32]
}
 80021e4:	bf00      	nop
 80021e6:	e7fe      	b.n	80021e6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d103      	bne.n	80021f6 <xQueueGenericSendFromISR+0x72>
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <xQueueGenericSendFromISR+0x76>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <xQueueGenericSendFromISR+0x78>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10c      	bne.n	800221a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	b672      	cpsid	i
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	b662      	cpsie	i
 8002214:	61fb      	str	r3, [r7, #28]
}
 8002216:	bf00      	nop
 8002218:	e7fe      	b.n	8002218 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800221a:	f001 fe8f 	bl	8003f3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800221e:	f3ef 8211 	mrs	r2, BASEPRI
 8002222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002226:	b672      	cpsid	i
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	b662      	cpsie	i
 8002236:	61ba      	str	r2, [r7, #24]
 8002238:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800223a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	429a      	cmp	r2, r3
 8002248:	d302      	bcc.n	8002250 <xQueueGenericSendFromISR+0xcc>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d12c      	bne.n	80022aa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002260:	f000 f90a 	bl	8002478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002264:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d112      	bne.n	8002294 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	3324      	adds	r3, #36	; 0x24
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fe6a 	bl	8002f54 <xTaskRemoveFromEventList>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e007      	b.n	80022a4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002298:	3301      	adds	r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	b25a      	sxtb	r2, r3
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80022a4:	2301      	movs	r3, #1
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80022a8:	e001      	b.n	80022ae <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3738      	adds	r7, #56	; 0x38
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	; 0x30
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <xQueueReceive+0x34>
	__asm volatile
 80022de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e2:	b672      	cpsid	i
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	b662      	cpsie	i
 80022f2:	623b      	str	r3, [r7, #32]
}
 80022f4:	bf00      	nop
 80022f6:	e7fe      	b.n	80022f6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <xQueueReceive+0x42>
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <xQueueReceive+0x46>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <xQueueReceive+0x48>
 800230a:	2300      	movs	r3, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10c      	bne.n	800232a <xQueueReceive+0x66>
	__asm volatile
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	b672      	cpsid	i
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	b662      	cpsie	i
 8002324:	61fb      	str	r3, [r7, #28]
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800232a:	f000 ffd3 	bl	80032d4 <xTaskGetSchedulerState>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <xQueueReceive+0x76>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <xQueueReceive+0x7a>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <xQueueReceive+0x7c>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10c      	bne.n	800235e <xQueueReceive+0x9a>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	b672      	cpsid	i
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	b662      	cpsie	i
 8002358:	61bb      	str	r3, [r7, #24]
}
 800235a:	bf00      	nop
 800235c:	e7fe      	b.n	800235c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800235e:	f001 fd05 	bl	8003d6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d014      	beq.n	8002398 <xQueueReceive+0xd4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002372:	f000 f8eb 	bl	800254c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <xQueueReceive+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	3310      	adds	r3, #16
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fde2 	bl	8002f54 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002390:	f001 fd20 	bl	8003dd4 <vPortExitCritical>
				return pdPASS;
 8002394:	2301      	movs	r3, #1
 8002396:	e069      	b.n	800246c <xQueueReceive+0x1a8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <xQueueReceive+0xe2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800239e:	f001 fd19 	bl	8003dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e062      	b.n	800246c <xQueueReceive+0x1a8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <xQueueReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fe35 	bl	8003020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023ba:	f001 fd0b 	bl	8003dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023be:	f000 fbcd 	bl	8002b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023c2:	f001 fcd3 	bl	8003d6c <vPortEnterCritical>
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d103      	bne.n	80023dc <xQueueReceive+0x118>
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023e2:	b25b      	sxtb	r3, r3
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d103      	bne.n	80023f2 <xQueueReceive+0x12e>
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023f2:	f001 fcef 	bl	8003dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023f6:	1d3a      	adds	r2, r7, #4
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fe24 	bl	800304c <xTaskCheckForTimeOut>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d123      	bne.n	8002452 <xQueueReceive+0x18e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800240a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800240c:	f000 f916 	bl	800263c <prvIsQueueEmpty>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <xQueueReceive+0x182>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	3324      	adds	r3, #36	; 0x24
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fd44 	bl	8002eac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002426:	f000 f8b7 	bl	8002598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800242a:	f000 fba5 	bl	8002b78 <xTaskResumeAll>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d194      	bne.n	800235e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <xQueueReceive+0x1b0>)
 8002436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	e78b      	b.n	800235e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002448:	f000 f8a6 	bl	8002598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800244c:	f000 fb94 	bl	8002b78 <xTaskResumeAll>
 8002450:	e785      	b.n	800235e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002454:	f000 f8a0 	bl	8002598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002458:	f000 fb8e 	bl	8002b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800245c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800245e:	f000 f8ed 	bl	800263c <prvIsQueueEmpty>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	f43f af7a 	beq.w	800235e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800246a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800246c:	4618      	mov	r0, r3
 800246e:	3730      	adds	r7, #48	; 0x30
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d14d      	bne.n	800253a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 ff34 	bl	8003310 <xTaskPriorityDisinherit>
 80024a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e043      	b.n	800253a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d119      	bne.n	80024ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6858      	ldr	r0, [r3, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	461a      	mov	r2, r3
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	f001 ff8c 	bl	80043e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	441a      	add	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d32b      	bcc.n	800253a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	e026      	b.n	800253a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68d8      	ldr	r0, [r3, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	461a      	mov	r2, r3
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	f001 ff72 	bl	80043e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	425b      	negs	r3, r3
 8002506:	441a      	add	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d207      	bcs.n	8002528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	425b      	negs	r3, r3
 8002522:	441a      	add	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d105      	bne.n	800253a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	3b01      	subs	r3, #1
 8002538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002542:	697b      	ldr	r3, [r7, #20]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d018      	beq.n	8002590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	441a      	add	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	d303      	bcc.n	8002580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	461a      	mov	r2, r3
 800258a:	6838      	ldr	r0, [r7, #0]
 800258c:	f001 ff28 	bl	80043e0 <memcpy>
	}
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025a0:	f001 fbe4 	bl	8003d6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025ac:	e011      	b.n	80025d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3324      	adds	r3, #36	; 0x24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fcca 	bl	8002f54 <xTaskRemoveFromEventList>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025c6:	f000 fda7 	bl	8003118 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dce9      	bgt.n	80025ae <prvUnlockQueue+0x16>
 80025da:	e000      	b.n	80025de <prvUnlockQueue+0x46>
					break;
 80025dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80025e6:	f001 fbf5 	bl	8003dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025ea:	f001 fbbf 	bl	8003d6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025f6:	e011      	b.n	800261c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3310      	adds	r3, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fca5 	bl	8002f54 <xTaskRemoveFromEventList>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002610:	f000 fd82 	bl	8003118 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002614:	7bbb      	ldrb	r3, [r7, #14]
 8002616:	3b01      	subs	r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800261c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002620:	2b00      	cmp	r3, #0
 8002622:	dce9      	bgt.n	80025f8 <prvUnlockQueue+0x60>
 8002624:	e000      	b.n	8002628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	22ff      	movs	r2, #255	; 0xff
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002630:	f001 fbd0 	bl	8003dd4 <vPortExitCritical>
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002644:	f001 fb92 	bl	8003d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002650:	2301      	movs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e001      	b.n	800265a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800265a:	f001 fbbb 	bl	8003dd4 <vPortExitCritical>

	return xReturn;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002670:	f001 fb7c 	bl	8003d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	429a      	cmp	r2, r3
 800267e:	d102      	bne.n	8002686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002680:	2301      	movs	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e001      	b.n	800268a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800268a:	f001 fba3 	bl	8003dd4 <vPortExitCritical>

	return xReturn;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e014      	b.n	80026d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <vQueueAddToRegistry+0x50>)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <vQueueAddToRegistry+0x50>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <vQueueAddToRegistry+0x50>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80026ca:	e006      	b.n	80026da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	d9e7      	bls.n	80026a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200049c0 	.word	0x200049c0

080026ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80026fc:	f001 fb36 	bl	8003d6c <vPortEnterCritical>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002706:	b25b      	sxtb	r3, r3
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d103      	bne.n	8002716 <vQueueWaitForMessageRestricted+0x2a>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271c:	b25b      	sxtb	r3, r3
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d103      	bne.n	800272c <vQueueWaitForMessageRestricted+0x40>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272c:	f001 fb52 	bl	8003dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3324      	adds	r3, #36	; 0x24
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fbd9 	bl	8002ef8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff26 	bl	8002598 <prvUnlockQueue>
	}
 800274c:	bf00      	nop
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08e      	sub	sp, #56	; 0x38
 8002758:	af04      	add	r7, sp, #16
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10c      	bne.n	8002782 <xTaskCreateStatic+0x2e>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	b672      	cpsid	i
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	b662      	cpsie	i
 800277c:	623b      	str	r3, [r7, #32]
}
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	b672      	cpsid	i
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	b662      	cpsie	i
 800279c:	61fb      	str	r3, [r7, #28]
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027a2:	235c      	movs	r3, #92	; 0x5c
 80027a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b5c      	cmp	r3, #92	; 0x5c
 80027aa:	d00c      	beq.n	80027c6 <xTaskCreateStatic+0x72>
	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	b672      	cpsid	i
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	b662      	cpsie	i
 80027c0:	61bb      	str	r3, [r7, #24]
}
 80027c2:	bf00      	nop
 80027c4:	e7fe      	b.n	80027c4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80027c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01e      	beq.n	800280c <xTaskCreateStatic+0xb8>
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027e6:	2300      	movs	r3, #0
 80027e8:	9303      	str	r3, [sp, #12]
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f850 	bl	80028a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002806:	f000 f8df 	bl	80029c8 <prvAddNewTaskToReadyList>
 800280a:	e001      	b.n	8002810 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002810:	697b      	ldr	r3, [r7, #20]
	}
 8002812:	4618      	mov	r0, r3
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08c      	sub	sp, #48	; 0x30
 800281e:	af04      	add	r7, sp, #16
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fbc8 	bl	8003fc4 <pvPortMalloc>
 8002834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800283c:	205c      	movs	r0, #92	; 0x5c
 800283e:	f001 fbc1 	bl	8003fc4 <pvPortMalloc>
 8002842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
 8002850:	e005      	b.n	800285e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f001 fc80 	bl	8004158 <vPortFree>
 8002858:	e001      	b.n	800285e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d017      	beq.n	8002894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	2300      	movs	r3, #0
 8002870:	9303      	str	r3, [sp, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f80e 	bl	80028a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002888:	69f8      	ldr	r0, [r7, #28]
 800288a:	f000 f89d 	bl	80029c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e002      	b.n	800289a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800289a:	69bb      	ldr	r3, [r7, #24]
	}
 800289c:	4618      	mov	r0, r3
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	461a      	mov	r2, r3
 80028bc:	21a5      	movs	r1, #165	; 0xa5
 80028be:	f001 fd9d 	bl	80043fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80028cc:	440b      	add	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f023 0307 	bic.w	r3, r3, #7
 80028da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	b672      	cpsid	i
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	b662      	cpsie	i
 80028fa:	617b      	str	r3, [r7, #20]
}
 80028fc:	bf00      	nop
 80028fe:	e7fe      	b.n	80028fe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01f      	beq.n	8002946 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	e012      	b.n	8002932 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	7819      	ldrb	r1, [r3, #0]
 8002914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	3334      	adds	r3, #52	; 0x34
 800291c:	460a      	mov	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d9e9      	bls.n	800290c <prvInitialiseNewTask+0x68>
 8002938:	e000      	b.n	800293c <prvInitialiseNewTask+0x98>
			{
				break;
 800293a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002944:	e003      	b.n	800294e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	2b37      	cmp	r3, #55	; 0x37
 8002952:	d901      	bls.n	8002958 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002954:	2337      	movs	r3, #55	; 0x37
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002962:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	2200      	movs	r2, #0
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	3304      	adds	r3, #4
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f984 	bl	8001c7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	3318      	adds	r3, #24
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f97f 	bl	8001c7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002982:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	2200      	movs	r2, #0
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	69b8      	ldr	r0, [r7, #24]
 80029a8:	f001 f8d4 	bl	8003b54 <pxPortInitialiseStack>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029be:	bf00      	nop
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029d0:	f001 f9cc 	bl	8003d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <prvAddNewTaskToReadyList+0xa8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <prvAddNewTaskToReadyList+0xa8>)
 80029dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029de:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <prvAddNewTaskToReadyList+0xac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029e6:	4a23      	ldr	r2, [pc, #140]	; (8002a74 <prvAddNewTaskToReadyList+0xac>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <prvAddNewTaskToReadyList+0xa8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d110      	bne.n	8002a16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029f4:	f000 fbae 	bl	8003154 <prvInitialiseTaskLists>
 80029f8:	e00d      	b.n	8002a16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <prvAddNewTaskToReadyList+0xb0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <prvAddNewTaskToReadyList+0xac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d802      	bhi.n	8002a16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <prvAddNewTaskToReadyList+0xac>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <prvAddNewTaskToReadyList+0xb4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <prvAddNewTaskToReadyList+0xb4>)
 8002a1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <prvAddNewTaskToReadyList+0xb4>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <prvAddNewTaskToReadyList+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d903      	bls.n	8002a3c <prvAddNewTaskToReadyList+0x74>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <prvAddNewTaskToReadyList+0xb8>)
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <prvAddNewTaskToReadyList+0xbc>)
 8002a4a:	441a      	add	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f7ff f91f 	bl	8001c96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a58:	f001 f9bc 	bl	8003dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <prvAddNewTaskToReadyList+0xb0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <prvAddNewTaskToReadyList+0xac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000c34 	.word	0x20000c34
 8002a74:	20000760 	.word	0x20000760
 8002a78:	20000c40 	.word	0x20000c40
 8002a7c:	20000c50 	.word	0x20000c50
 8002a80:	20000c3c 	.word	0x20000c3c
 8002a84:	20000764 	.word	0x20000764

08002a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a96:	463a      	mov	r2, r7
 8002a98:	1d39      	adds	r1, r7, #4
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f898 	bl	8001bd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	9202      	str	r2, [sp, #8]
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	4923      	ldr	r1, [pc, #140]	; (8002b44 <vTaskStartScheduler+0xbc>)
 8002ab8:	4823      	ldr	r0, [pc, #140]	; (8002b48 <vTaskStartScheduler+0xc0>)
 8002aba:	f7ff fe4b 	bl	8002754 <xTaskCreateStatic>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <vTaskStartScheduler+0xc4>)
 8002ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ac4:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <vTaskStartScheduler+0xc4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002acc:	2301      	movs	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e001      	b.n	8002ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d102      	bne.n	8002ae2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002adc:	f000 fcde 	bl	800349c <xTimerCreateTimerTask>
 8002ae0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d118      	bne.n	8002b1a <vTaskStartScheduler+0x92>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	b672      	cpsid	i
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	b662      	cpsie	i
 8002afc:	613b      	str	r3, [r7, #16]
}
 8002afe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <vTaskStartScheduler+0xc8>)
 8002b02:	f04f 32ff 	mov.w	r2, #4294967295
 8002b06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <vTaskStartScheduler+0xcc>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <vTaskStartScheduler+0xd0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b14:	f001 f8ac 	bl	8003c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b18:	e010      	b.n	8002b3c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d10c      	bne.n	8002b3c <vTaskStartScheduler+0xb4>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	b672      	cpsid	i
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	b662      	cpsie	i
 8002b36:	60fb      	str	r3, [r7, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	e7fe      	b.n	8002b3a <vTaskStartScheduler+0xb2>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	08005420 	.word	0x08005420
 8002b48:	08003131 	.word	0x08003131
 8002b4c:	20000c58 	.word	0x20000c58
 8002b50:	20000c54 	.word	0x20000c54
 8002b54:	20000c40 	.word	0x20000c40
 8002b58:	20000c38 	.word	0x20000c38

08002b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <vTaskSuspendAll+0x18>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a03      	ldr	r2, [pc, #12]	; (8002b74 <vTaskSuspendAll+0x18>)
 8002b68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	20000c5c 	.word	0x20000c5c

08002b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <xTaskResumeAll+0x104>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <xTaskResumeAll+0x30>
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	b672      	cpsid	i
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	b662      	cpsie	i
 8002ba2:	603b      	str	r3, [r7, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ba8:	f001 f8e0 	bl	8003d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <xTaskResumeAll+0x104>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <xTaskResumeAll+0x104>)
 8002bb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <xTaskResumeAll+0x104>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d156      	bne.n	8002c6c <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <xTaskResumeAll+0x108>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d052      	beq.n	8002c6c <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bc6:	e02f      	b.n	8002c28 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <xTaskResumeAll+0x10c>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f8bb 	bl	8001d50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f8b6 	bl	8001d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <xTaskResumeAll+0x110>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d903      	bls.n	8002bf8 <xTaskResumeAll+0x80>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <xTaskResumeAll+0x110>)
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <xTaskResumeAll+0x114>)
 8002c06:	441a      	add	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f7ff f841 	bl	8001c96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <xTaskResumeAll+0x118>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <xTaskResumeAll+0x11c>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <xTaskResumeAll+0x10c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1cb      	bne.n	8002bc8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c36:	f000 fb2d 	bl	8003294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <xTaskResumeAll+0x120>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d010      	beq.n	8002c68 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c46:	f000 f839 	bl	8002cbc <xTaskIncrementTick>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <xTaskResumeAll+0x11c>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f1      	bne.n	8002c46 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <xTaskResumeAll+0x120>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <xTaskResumeAll+0x11c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c6c:	f001 f8b2 	bl	8003dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000c5c 	.word	0x20000c5c
 8002c80:	20000c34 	.word	0x20000c34
 8002c84:	20000bf4 	.word	0x20000bf4
 8002c88:	20000c3c 	.word	0x20000c3c
 8002c8c:	20000764 	.word	0x20000764
 8002c90:	20000760 	.word	0x20000760
 8002c94:	20000c48 	.word	0x20000c48
 8002c98:	20000c44 	.word	0x20000c44

08002c9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <xTaskGetTickCount+0x1c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000c38 	.word	0x20000c38

08002cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc6:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <xTaskIncrementTick+0x10c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d172      	bne.n	8002db4 <xTaskIncrementTick+0xf8>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <xTaskIncrementTick+0x110>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cd6:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <xTaskIncrementTick+0x110>)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d122      	bne.n	8002d28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <xTaskIncrementTick+0x114>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	b672      	cpsid	i
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	b662      	cpsie	i
 8002d00:	603b      	str	r3, [r7, #0]
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xTaskIncrementTick+0x48>
 8002d06:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <xTaskIncrementTick+0x114>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <xTaskIncrementTick+0x118>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2f      	ldr	r2, [pc, #188]	; (8002dd0 <xTaskIncrementTick+0x114>)
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <xTaskIncrementTick+0x118>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <xTaskIncrementTick+0x11c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4a2d      	ldr	r2, [pc, #180]	; (8002dd8 <xTaskIncrementTick+0x11c>)
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	f000 fab6 	bl	8003294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d28:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <xTaskIncrementTick+0x120>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d345      	bcc.n	8002dbe <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <xTaskIncrementTick+0x114>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <xTaskIncrementTick+0x120>)
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	601a      	str	r2, [r3, #0]
					break;
 8002d44:	e03b      	b.n	8002dbe <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <xTaskIncrementTick+0x114>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d203      	bcs.n	8002d66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <xTaskIncrementTick+0x120>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d64:	e02b      	b.n	8002dbe <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fff0 	bl	8001d50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d004      	beq.n	8002d82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	3318      	adds	r3, #24
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe ffe7 	bl	8001d50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <xTaskIncrementTick+0x124>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d903      	bls.n	8002d96 <xTaskIncrementTick+0xda>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <xTaskIncrementTick+0x124>)
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <xTaskIncrementTick+0x128>)
 8002da4:	441a      	add	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f7fe ff72 	bl	8001c96 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002db2:	e7be      	b.n	8002d32 <xTaskIncrementTick+0x76>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <xTaskIncrementTick+0x12c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <xTaskIncrementTick+0x12c>)
 8002dbc:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dbe:	697b      	ldr	r3, [r7, #20]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000c5c 	.word	0x20000c5c
 8002dcc:	20000c38 	.word	0x20000c38
 8002dd0:	20000bec 	.word	0x20000bec
 8002dd4:	20000bf0 	.word	0x20000bf0
 8002dd8:	20000c4c 	.word	0x20000c4c
 8002ddc:	20000c54 	.word	0x20000c54
 8002de0:	20000c3c 	.word	0x20000c3c
 8002de4:	20000764 	.word	0x20000764
 8002de8:	20000c44 	.word	0x20000c44

08002dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <vTaskSwitchContext+0xac>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <vTaskSwitchContext+0xb0>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e00:	e043      	b.n	8002e8a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <vTaskSwitchContext+0xb0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <vTaskSwitchContext+0xb4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e012      	b.n	8002e36 <vTaskSwitchContext+0x4a>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10c      	bne.n	8002e30 <vTaskSwitchContext+0x44>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	b672      	cpsid	i
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	b662      	cpsie	i
 8002e2a:	607b      	str	r3, [r7, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <vTaskSwitchContext+0x42>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	491b      	ldr	r1, [pc, #108]	; (8002ea4 <vTaskSwitchContext+0xb8>)
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0e2      	beq.n	8002e10 <vTaskSwitchContext+0x24>
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <vTaskSwitchContext+0xb8>)
 8002e56:	4413      	add	r3, r2
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d104      	bne.n	8002e7a <vTaskSwitchContext+0x8e>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <vTaskSwitchContext+0xbc>)
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <vTaskSwitchContext+0xb4>)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6013      	str	r3, [r2, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000c5c 	.word	0x20000c5c
 8002e9c:	20000c48 	.word	0x20000c48
 8002ea0:	20000c3c 	.word	0x20000c3c
 8002ea4:	20000764 	.word	0x20000764
 8002ea8:	20000760 	.word	0x20000760

08002eac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10c      	bne.n	8002ed6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	b672      	cpsid	i
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	b662      	cpsie	i
 8002ed0:	60fb      	str	r3, [r7, #12]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <vTaskPlaceOnEventList+0x48>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3318      	adds	r3, #24
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe fefd 	bl	8001cde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	6838      	ldr	r0, [r7, #0]
 8002ee8:	f000 fa84 	bl	80033f4 <prvAddCurrentTaskToDelayedList>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000760 	.word	0x20000760

08002ef8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	b672      	cpsid	i
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	b662      	cpsie	i
 8002f1e:	617b      	str	r3, [r7, #20]
}
 8002f20:	bf00      	nop
 8002f22:	e7fe      	b.n	8002f22 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <vTaskPlaceOnEventListRestricted+0x58>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3318      	adds	r3, #24
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fe feb2 	bl	8001c96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	68b8      	ldr	r0, [r7, #8]
 8002f42:	f000 fa57 	bl	80033f4 <prvAddCurrentTaskToDelayedList>
	}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000760 	.word	0x20000760

08002f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	b672      	cpsid	i
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	b662      	cpsie	i
 8002f7e:	60fb      	str	r3, [r7, #12]
}
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	3318      	adds	r3, #24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fee1 	bl	8001d50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <xTaskRemoveFromEventList+0xb4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11d      	bne.n	8002fd2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fed8 	bl	8001d50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <xTaskRemoveFromEventList+0xb8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d903      	bls.n	8002fb4 <xTaskRemoveFromEventList+0x60>
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4a16      	ldr	r2, [pc, #88]	; (800300c <xTaskRemoveFromEventList+0xb8>)
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <xTaskRemoveFromEventList+0xbc>)
 8002fc2:	441a      	add	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7fe fe63 	bl	8001c96 <vListInsertEnd>
 8002fd0:	e005      	b.n	8002fde <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <xTaskRemoveFromEventList+0xc0>)
 8002fda:	f7fe fe5c 	bl	8001c96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <xTaskRemoveFromEventList+0xc4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d905      	bls.n	8002ff8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <xTaskRemoveFromEventList+0xc8>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e001      	b.n	8002ffc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002ffc:	697b      	ldr	r3, [r7, #20]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000c5c 	.word	0x20000c5c
 800300c:	20000c3c 	.word	0x20000c3c
 8003010:	20000764 	.word	0x20000764
 8003014:	20000bf4 	.word	0x20000bf4
 8003018:	20000760 	.word	0x20000760
 800301c:	20000c48 	.word	0x20000c48

08003020 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <vTaskInternalSetTimeOutState+0x24>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <vTaskInternalSetTimeOutState+0x28>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	605a      	str	r2, [r3, #4]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	20000c4c 	.word	0x20000c4c
 8003048:	20000c38 	.word	0x20000c38

0800304c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10c      	bne.n	8003076 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	b672      	cpsid	i
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	b662      	cpsie	i
 8003070:	613b      	str	r3, [r7, #16]
}
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10c      	bne.n	8003096 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	b672      	cpsid	i
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	b662      	cpsie	i
 8003090:	60fb      	str	r3, [r7, #12]
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8003096:	f000 fe69 	bl	8003d6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <xTaskCheckForTimeOut+0xc4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d102      	bne.n	80030ba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e023      	b.n	8003102 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <xTaskCheckForTimeOut+0xc8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d007      	beq.n	80030d6 <xTaskCheckForTimeOut+0x8a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e015      	b.n	8003102 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d20b      	bcs.n	80030f8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad2      	subs	r2, r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff97 	bl	8003020 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e004      	b.n	8003102 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030fe:	2301      	movs	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003102:	f000 fe67 	bl	8003dd4 <vPortExitCritical>

	return xReturn;
 8003106:	69fb      	ldr	r3, [r7, #28]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000c38 	.word	0x20000c38
 8003114:	20000c4c 	.word	0x20000c4c

08003118 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <vTaskMissedYield+0x14>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	20000c48 	.word	0x20000c48

08003130 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003138:	f000 f84c 	bl	80031d4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <prvIdleTask+0x20>)
 800313e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800314c:	e7f4      	b.n	8003138 <prvIdleTask+0x8>
 800314e:	bf00      	nop
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	e00c      	b.n	800317a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <prvInitialiseTaskLists+0x60>)
 800316c:	4413      	add	r3, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fd64 	bl	8001c3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b37      	cmp	r3, #55	; 0x37
 800317e:	d9ef      	bls.n	8003160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <prvInitialiseTaskLists+0x64>)
 8003182:	f7fe fd5b 	bl	8001c3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003186:	480d      	ldr	r0, [pc, #52]	; (80031bc <prvInitialiseTaskLists+0x68>)
 8003188:	f7fe fd58 	bl	8001c3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <prvInitialiseTaskLists+0x6c>)
 800318e:	f7fe fd55 	bl	8001c3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003192:	480c      	ldr	r0, [pc, #48]	; (80031c4 <prvInitialiseTaskLists+0x70>)
 8003194:	f7fe fd52 	bl	8001c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003198:	480b      	ldr	r0, [pc, #44]	; (80031c8 <prvInitialiseTaskLists+0x74>)
 800319a:	f7fe fd4f 	bl	8001c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <prvInitialiseTaskLists+0x78>)
 80031a0:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <prvInitialiseTaskLists+0x64>)
 80031a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <prvInitialiseTaskLists+0x7c>)
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <prvInitialiseTaskLists+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000764 	.word	0x20000764
 80031b8:	20000bc4 	.word	0x20000bc4
 80031bc:	20000bd8 	.word	0x20000bd8
 80031c0:	20000bf4 	.word	0x20000bf4
 80031c4:	20000c08 	.word	0x20000c08
 80031c8:	20000c20 	.word	0x20000c20
 80031cc:	20000bec 	.word	0x20000bec
 80031d0:	20000bf0 	.word	0x20000bf0

080031d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031da:	e019      	b.n	8003210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031dc:	f000 fdc6 	bl	8003d6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <prvCheckTasksWaitingTermination+0x50>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fdaf 	bl	8001d50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <prvCheckTasksWaitingTermination+0x54>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <prvCheckTasksWaitingTermination+0x54>)
 80031fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <prvCheckTasksWaitingTermination+0x58>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3b01      	subs	r3, #1
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <prvCheckTasksWaitingTermination+0x58>)
 8003204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003206:	f000 fde5 	bl	8003dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f810 	bl	8003230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <prvCheckTasksWaitingTermination+0x58>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e1      	bne.n	80031dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000c08 	.word	0x20000c08
 8003228:	20000c34 	.word	0x20000c34
 800322c:	20000c1c 	.word	0x20000c1c

08003230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4618      	mov	r0, r3
 8003248:	f000 ff86 	bl	8004158 <vPortFree>
				vPortFree( pxTCB );
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 ff83 	bl	8004158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003252:	e01a      	b.n	800328a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800325a:	2b01      	cmp	r3, #1
 800325c:	d103      	bne.n	8003266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 ff7a 	bl	8004158 <vPortFree>
	}
 8003264:	e011      	b.n	800328a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800326c:	2b02      	cmp	r3, #2
 800326e:	d00c      	beq.n	800328a <prvDeleteTCB+0x5a>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	b672      	cpsid	i
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	b662      	cpsie	i
 8003284:	60fb      	str	r3, [r7, #12]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <prvDeleteTCB+0x58>
	}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <prvResetNextTaskUnblockTime+0x38>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <prvResetNextTaskUnblockTime+0x3c>)
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032ac:	e008      	b.n	80032c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <prvResetNextTaskUnblockTime+0x38>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <prvResetNextTaskUnblockTime+0x3c>)
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	20000bec 	.word	0x20000bec
 80032d0:	20000c54 	.word	0x20000c54

080032d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <xTaskGetSchedulerState+0x34>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032e2:	2301      	movs	r3, #1
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	e008      	b.n	80032fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <xTaskGetSchedulerState+0x38>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032f0:	2302      	movs	r3, #2
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	e001      	b.n	80032fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032fa:	687b      	ldr	r3, [r7, #4]
	}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	20000c40 	.word	0x20000c40
 800330c:	20000c5c 	.word	0x20000c5c

08003310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d05a      	beq.n	80033dc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <xTaskPriorityDisinherit+0xd8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	429a      	cmp	r2, r3
 800332e:	d00c      	beq.n	800334a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	b672      	cpsid	i
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	b662      	cpsie	i
 8003344:	60fb      	str	r3, [r7, #12]
}
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	b672      	cpsid	i
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	b662      	cpsie	i
 8003366:	60bb      	str	r3, [r7, #8]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	429a      	cmp	r2, r3
 8003380:	d02c      	beq.n	80033dc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d128      	bne.n	80033dc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	3304      	adds	r3, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fcde 	bl	8001d50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <xTaskPriorityDisinherit+0xdc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d903      	bls.n	80033bc <xTaskPriorityDisinherit+0xac>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <xTaskPriorityDisinherit+0xdc>)
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <xTaskPriorityDisinherit+0xe0>)
 80033ca:	441a      	add	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f7fe fc5f 	bl	8001c96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80033d8:	2301      	movs	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033dc:	697b      	ldr	r3, [r7, #20]
	}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000760 	.word	0x20000760
 80033ec:	20000c3c 	.word	0x20000c3c
 80033f0:	20000764 	.word	0x20000764

080033f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <prvAddCurrentTaskToDelayedList+0x90>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <prvAddCurrentTaskToDelayedList+0x94>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fca0 	bl	8001d50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d10a      	bne.n	800342e <prvAddCurrentTaskToDelayedList+0x3a>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <prvAddCurrentTaskToDelayedList+0x94>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4819      	ldr	r0, [pc, #100]	; (800348c <prvAddCurrentTaskToDelayedList+0x98>)
 8003428:	f7fe fc35 	bl	8001c96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800342c:	e026      	b.n	800347c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <prvAddCurrentTaskToDelayedList+0x94>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	429a      	cmp	r2, r3
 8003444:	d209      	bcs.n	800345a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <prvAddCurrentTaskToDelayedList+0x94>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7fe fc43 	bl	8001cde <vListInsert>
}
 8003458:	e010      	b.n	800347c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <prvAddCurrentTaskToDelayedList+0xa0>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <prvAddCurrentTaskToDelayedList+0x94>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f7fe fc39 	bl	8001cde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	429a      	cmp	r2, r3
 8003474:	d202      	bcs.n	800347c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003476:	4a08      	ldr	r2, [pc, #32]	; (8003498 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000c38 	.word	0x20000c38
 8003488:	20000760 	.word	0x20000760
 800348c:	20000c20 	.word	0x20000c20
 8003490:	20000bf0 	.word	0x20000bf0
 8003494:	20000bec 	.word	0x20000bec
 8003498:	20000c54 	.word	0x20000c54

0800349c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80034a6:	f000 fb15 	bl	8003ad4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <xTimerCreateTimerTask+0x84>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d021      	beq.n	80034f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80034ba:	1d3a      	adds	r2, r7, #4
 80034bc:	f107 0108 	add.w	r1, r7, #8
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fb9f 	bl	8001c08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	9202      	str	r2, [sp, #8]
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2302      	movs	r3, #2
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	460a      	mov	r2, r1
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <xTimerCreateTimerTask+0x88>)
 80034de:	4812      	ldr	r0, [pc, #72]	; (8003528 <xTimerCreateTimerTask+0x8c>)
 80034e0:	f7ff f938 	bl	8002754 <xTaskCreateStatic>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4a11      	ldr	r2, [pc, #68]	; (800352c <xTimerCreateTimerTask+0x90>)
 80034e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <xTimerCreateTimerTask+0x90>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80034f2:	2301      	movs	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10c      	bne.n	8003516 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	b672      	cpsid	i
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	b662      	cpsie	i
 8003510:	613b      	str	r3, [r7, #16]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000c90 	.word	0x20000c90
 8003524:	08005428 	.word	0x08005428
 8003528:	0800366d 	.word	0x0800366d
 800352c:	20000c94 	.word	0x20000c94

08003530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10c      	bne.n	8003562 <xTimerGenericCommand+0x32>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	b672      	cpsid	i
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	b662      	cpsie	i
 800355c:	623b      	str	r3, [r7, #32]
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <xTimerGenericCommand+0x9c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02a      	beq.n	80035c0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b05      	cmp	r3, #5
 800357a:	dc18      	bgt.n	80035ae <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800357c:	f7ff feaa 	bl	80032d4 <xTaskGetSchedulerState>
 8003580:	4603      	mov	r3, r0
 8003582:	2b02      	cmp	r3, #2
 8003584:	d109      	bne.n	800359a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <xTimerGenericCommand+0x9c>)
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f107 0110 	add.w	r1, r7, #16
 800358e:	2300      	movs	r3, #0
 8003590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003592:	f7fe fd09 	bl	8001fa8 <xQueueGenericSend>
 8003596:	6278      	str	r0, [r7, #36]	; 0x24
 8003598:	e012      	b.n	80035c0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <xTimerGenericCommand+0x9c>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f107 0110 	add.w	r1, r7, #16
 80035a2:	2300      	movs	r3, #0
 80035a4:	2200      	movs	r2, #0
 80035a6:	f7fe fcff 	bl	8001fa8 <xQueueGenericSend>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24
 80035ac:	e008      	b.n	80035c0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035ae:	4b07      	ldr	r3, [pc, #28]	; (80035cc <xTimerGenericCommand+0x9c>)
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	f107 0110 	add.w	r1, r7, #16
 80035b6:	2300      	movs	r3, #0
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	f7fe fde3 	bl	8002184 <xQueueGenericSendFromISR>
 80035be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000c90 	.word	0x20000c90

080035d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <prvProcessExpiredTimer+0x98>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fbb1 	bl	8001d50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d024      	beq.n	8003646 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	18d1      	adds	r1, r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f000 f8d3 	bl	80037b4 <prvInsertTimerInActiveList>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d021      	beq.n	8003658 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2300      	movs	r3, #0
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	2100      	movs	r1, #0
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f7ff ff86 	bl	8003530 <xTimerGenericCommand>
 8003624:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d115      	bne.n	8003658 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	b672      	cpsid	i
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	b662      	cpsie	i
 8003640:	60fb      	str	r3, [r7, #12]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	b2da      	uxtb	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	6978      	ldr	r0, [r7, #20]
 800365e:	4798      	blx	r3
}
 8003660:	bf00      	nop
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000c88 	.word	0x20000c88

0800366c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003674:	f107 0308 	add.w	r3, r7, #8
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f857 	bl	800372c <prvGetNextExpireTime>
 800367e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4619      	mov	r1, r3
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f803 	bl	8003690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800368a:	f000 f8d5 	bl	8003838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800368e:	e7f1      	b.n	8003674 <prvTimerTask+0x8>

08003690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800369a:	f7ff fa5f 	bl	8002b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f866 	bl	8003774 <prvSampleTimeNow>
 80036a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d130      	bne.n	8003712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <prvProcessTimerOrBlockTask+0x3c>
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d806      	bhi.n	80036cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80036be:	f7ff fa5b 	bl	8002b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff83 	bl	80035d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80036ca:	e024      	b.n	8003716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <prvProcessTimerOrBlockTask+0x90>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <prvProcessTimerOrBlockTask+0x50>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <prvProcessTimerOrBlockTask+0x52>
 80036e0:	2300      	movs	r3, #0
 80036e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <prvProcessTimerOrBlockTask+0x94>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	f7fe fffb 	bl	80026ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80036f6:	f7ff fa3f 	bl	8002b78 <xTaskResumeAll>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <prvProcessTimerOrBlockTask+0x98>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
}
 8003710:	e001      	b.n	8003716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003712:	f7ff fa31 	bl	8002b78 <xTaskResumeAll>
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000c8c 	.word	0x20000c8c
 8003724:	20000c90 	.word	0x20000c90
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <prvGetNextExpireTime+0x44>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <prvGetNextExpireTime+0x16>
 800373e:	2201      	movs	r2, #1
 8003740:	e000      	b.n	8003744 <prvGetNextExpireTime+0x18>
 8003742:	2200      	movs	r2, #0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003750:	4b07      	ldr	r3, [pc, #28]	; (8003770 <prvGetNextExpireTime+0x44>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e001      	b.n	8003760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000c88 	.word	0x20000c88

08003774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800377c:	f7ff fa8e 	bl	8002c9c <xTaskGetTickCount>
 8003780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <prvSampleTimeNow+0x3c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d205      	bcs.n	8003798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800378c:	f000 f93c 	bl	8003a08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e002      	b.n	800379e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <prvSampleTimeNow+0x3c>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80037a4:	68fb      	ldr	r3, [r7, #12]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000c98 	.word	0x20000c98

080037b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d812      	bhi.n	8003800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	1ad2      	subs	r2, r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d302      	bcc.n	80037ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e01b      	b.n	8003826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <prvInsertTimerInActiveList+0x7c>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7fe fa70 	bl	8001cde <vListInsert>
 80037fe:	e012      	b.n	8003826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d206      	bcs.n	8003816 <prvInsertTimerInActiveList+0x62>
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e007      	b.n	8003826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <prvInsertTimerInActiveList+0x80>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3304      	adds	r3, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7fe fa5c 	bl	8001cde <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003826:	697b      	ldr	r3, [r7, #20]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000c8c 	.word	0x20000c8c
 8003834:	20000c88 	.word	0x20000c88

08003838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800383e:	e0d0      	b.n	80039e2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da1a      	bge.n	800387c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	3304      	adds	r3, #4
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	b672      	cpsid	i
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	b662      	cpsie	i
 8003866:	61fb      	str	r3, [r7, #28]
}
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003872:	6850      	ldr	r0, [r2, #4]
 8003874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	4611      	mov	r1, r2
 800387a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f2c0 80ae 	blt.w	80039e0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	3304      	adds	r3, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fa5b 	bl	8001d50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800389a:	463b      	mov	r3, r7
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff69 	bl	8003774 <prvSampleTimeNow>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b09      	cmp	r3, #9
 80038a8:	f200 809b 	bhi.w	80039e2 <prvProcessReceivedCommands+0x1aa>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <prvProcessReceivedCommands+0x7c>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	080038dd 	.word	0x080038dd
 80038bc:	080038dd 	.word	0x080038dd
 80038c0:	08003955 	.word	0x08003955
 80038c4:	08003969 	.word	0x08003969
 80038c8:	080039b7 	.word	0x080039b7
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038dd 	.word	0x080038dd
 80038d4:	08003955 	.word	0x08003955
 80038d8:	08003969 	.word	0x08003969
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	18d1      	adds	r1, r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038fc:	f7ff ff5a 	bl	80037b4 <prvInsertTimerInActiveList>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d06d      	beq.n	80039e2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800390c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d062      	beq.n	80039e2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	441a      	add	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2300      	movs	r3, #0
 800392a:	2100      	movs	r1, #0
 800392c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392e:	f7ff fdff 	bl	8003530 <xTimerGenericCommand>
 8003932:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d153      	bne.n	80039e2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	b672      	cpsid	i
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	b662      	cpsie	i
 800394e:	61bb      	str	r3, [r7, #24]
}
 8003950:	bf00      	nop
 8003952:	e7fe      	b.n	8003952 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003966:	e03c      	b.n	80039e2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10c      	bne.n	80039a2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	b672      	cpsid	i
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	b662      	cpsie	i
 800399c:	617b      	str	r3, [r7, #20]
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	18d1      	adds	r1, r2, r3
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039b0:	f7ff ff00 	bl	80037b4 <prvInsertTimerInActiveList>
					break;
 80039b4:	e015      	b.n	80039e2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80039c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c6:	f000 fbc7 	bl	8004158 <vPortFree>
 80039ca:	e00a      	b.n	80039e2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80039de:	e000      	b.n	80039e2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80039e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <prvProcessReceivedCommands+0x1cc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1d39      	adds	r1, r7, #4
 80039e8:	2200      	movs	r2, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fc6a 	bl	80022c4 <xQueueReceive>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f47f af24 	bne.w	8003840 <prvProcessReceivedCommands+0x8>
	}
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	3730      	adds	r7, #48	; 0x30
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000c90 	.word	0x20000c90

08003a08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a0e:	e04a      	b.n	8003aa6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a10:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <prvSwitchTimerLists+0xc4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <prvSwitchTimerLists+0xc4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe f991 	bl	8001d50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d030      	beq.n	8003aa6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d90e      	bls.n	8003a74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <prvSwitchTimerLists+0xc4>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f7fe f936 	bl	8001cde <vListInsert>
 8003a72:	e018      	b.n	8003aa6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a74:	2300      	movs	r3, #0
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff fd56 	bl	8003530 <xTimerGenericCommand>
 8003a84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10c      	bne.n	8003aa6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	b672      	cpsid	i
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	b662      	cpsie	i
 8003aa0:	603b      	str	r3, [r7, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <prvSwitchTimerLists+0xc4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1af      	bne.n	8003a10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <prvSwitchTimerLists+0xc4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <prvSwitchTimerLists+0xc8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a04      	ldr	r2, [pc, #16]	; (8003acc <prvSwitchTimerLists+0xc4>)
 8003abc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003abe:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <prvSwitchTimerLists+0xc8>)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000c88 	.word	0x20000c88
 8003ad0:	20000c8c 	.word	0x20000c8c

08003ad4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ada:	f000 f947 	bl	8003d6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <prvCheckForValidListAndQueue+0x60>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d120      	bne.n	8003b28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003ae6:	4814      	ldr	r0, [pc, #80]	; (8003b38 <prvCheckForValidListAndQueue+0x64>)
 8003ae8:	f7fe f8a8 	bl	8001c3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003aec:	4813      	ldr	r0, [pc, #76]	; (8003b3c <prvCheckForValidListAndQueue+0x68>)
 8003aee:	f7fe f8a5 	bl	8001c3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <prvCheckForValidListAndQueue+0x6c>)
 8003af4:	4a10      	ldr	r2, [pc, #64]	; (8003b38 <prvCheckForValidListAndQueue+0x64>)
 8003af6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <prvCheckForValidListAndQueue+0x70>)
 8003afa:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <prvCheckForValidListAndQueue+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <prvCheckForValidListAndQueue+0x74>)
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <prvCheckForValidListAndQueue+0x78>)
 8003b06:	2110      	movs	r1, #16
 8003b08:	200a      	movs	r0, #10
 8003b0a:	f7fe f9a8 	bl	8001e5e <xQueueGenericCreateStatic>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <prvCheckForValidListAndQueue+0x60>)
 8003b12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <prvCheckForValidListAndQueue+0x60>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <prvCheckForValidListAndQueue+0x60>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	490b      	ldr	r1, [pc, #44]	; (8003b50 <prvCheckForValidListAndQueue+0x7c>)
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fdb8 	bl	8002698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b28:	f000 f954 	bl	8003dd4 <vPortExitCritical>
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000c90 	.word	0x20000c90
 8003b38:	20000c60 	.word	0x20000c60
 8003b3c:	20000c74 	.word	0x20000c74
 8003b40:	20000c88 	.word	0x20000c88
 8003b44:	20000c8c 	.word	0x20000c8c
 8003b48:	20000d3c 	.word	0x20000d3c
 8003b4c:	20000c9c 	.word	0x20000c9c
 8003b50:	08005430 	.word	0x08005430

08003b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3b04      	subs	r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3b04      	subs	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b04      	subs	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b84:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <pxPortInitialiseStack+0x64>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3b14      	subs	r3, #20
 8003b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3b04      	subs	r3, #4
 8003b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f06f 0202 	mvn.w	r2, #2
 8003ba2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3b20      	subs	r3, #32
 8003ba8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	08003bbd 	.word	0x08003bbd

08003bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <prvTaskExitError+0x5c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d00c      	beq.n	8003bea <prvTaskExitError+0x2e>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	b672      	cpsid	i
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	b662      	cpsie	i
 8003be4:	60fb      	str	r3, [r7, #12]
}
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <prvTaskExitError+0x2c>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	b672      	cpsid	i
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	b662      	cpsie	i
 8003bfe:	60bb      	str	r3, [r7, #8]
}
 8003c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c02:	bf00      	nop
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0fc      	beq.n	8003c04 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	2000001c 	.word	0x2000001c
 8003c1c:	00000000 	.word	0x00000000

08003c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <pxCurrentTCBConst2>)
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	6808      	ldr	r0, [r1, #0]
 8003c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2a:	f380 8809 	msr	PSP, r0
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f380 8811 	msr	BASEPRI, r0
 8003c3a:	4770      	bx	lr
 8003c3c:	f3af 8000 	nop.w

08003c40 <pxCurrentTCBConst2>:
 8003c40:	20000760 	.word	0x20000760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop

08003c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c48:	4808      	ldr	r0, [pc, #32]	; (8003c6c <prvPortStartFirstTask+0x24>)
 8003c4a:	6800      	ldr	r0, [r0, #0]
 8003c4c:	6800      	ldr	r0, [r0, #0]
 8003c4e:	f380 8808 	msr	MSP, r0
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8814 	msr	CONTROL, r0
 8003c5a:	b662      	cpsie	i
 8003c5c:	b661      	cpsie	f
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	df00      	svc	0
 8003c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c6a:	bf00      	nop
 8003c6c:	e000ed08 	.word	0xe000ed08

08003c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <xPortStartScheduler+0xe4>)
 8003c78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	22ff      	movs	r2, #255	; 0xff
 8003c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <xPortStartScheduler+0xe8>)
 8003c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c9e:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <xPortStartScheduler+0xec>)
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ca4:	e009      	b.n	8003cba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <xPortStartScheduler+0xec>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	4a2b      	ldr	r2, [pc, #172]	; (8003d5c <xPortStartScheduler+0xec>)
 8003cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d0ef      	beq.n	8003ca6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cc6:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <xPortStartScheduler+0xec>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d00c      	beq.n	8003cec <xPortStartScheduler+0x7c>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	b672      	cpsid	i
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	b662      	cpsie	i
 8003ce6:	60bb      	str	r3, [r7, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <xPortStartScheduler+0xec>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <xPortStartScheduler+0xec>)
 8003cf4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cf6:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <xPortStartScheduler+0xec>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <xPortStartScheduler+0xec>)
 8003d00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <xPortStartScheduler+0xf0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <xPortStartScheduler+0xf0>)
 8003d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <xPortStartScheduler+0xf0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <xPortStartScheduler+0xf0>)
 8003d1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d22:	f000 f8dd 	bl	8003ee0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <xPortStartScheduler+0xf4>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d2c:	f000 f8fc 	bl	8003f28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <xPortStartScheduler+0xf8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <xPortStartScheduler+0xf8>)
 8003d36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d3c:	f7ff ff84 	bl	8003c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d40:	f7ff f854 	bl	8002dec <vTaskSwitchContext>
	prvTaskExitError();
 8003d44:	f7ff ff3a 	bl	8003bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000e400 	.word	0xe000e400
 8003d58:	20000d8c 	.word	0x20000d8c
 8003d5c:	20000d90 	.word	0x20000d90
 8003d60:	e000ed20 	.word	0xe000ed20
 8003d64:	2000001c 	.word	0x2000001c
 8003d68:	e000ef34 	.word	0xe000ef34

08003d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	b672      	cpsid	i
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	b662      	cpsie	i
 8003d86:	607b      	str	r3, [r7, #4]
}
 8003d88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <vPortEnterCritical+0x60>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <vPortEnterCritical+0x60>)
 8003d92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <vPortEnterCritical+0x60>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d111      	bne.n	8003dc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <vPortEnterCritical+0x64>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00c      	beq.n	8003dc0 <vPortEnterCritical+0x54>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	b672      	cpsid	i
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	b662      	cpsie	i
 8003dba:	603b      	str	r3, [r7, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <vPortEnterCritical+0x52>
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	2000001c 	.word	0x2000001c
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <vPortExitCritical+0x54>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <vPortExitCritical+0x28>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	b672      	cpsid	i
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	b662      	cpsie	i
 8003df6:	607b      	str	r3, [r7, #4]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <vPortExitCritical+0x54>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <vPortExitCritical+0x54>)
 8003e04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <vPortExitCritical+0x54>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d105      	bne.n	8003e1a <vPortExitCritical+0x46>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f383 8811 	msr	BASEPRI, r3
}
 8003e18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	2000001c 	.word	0x2000001c
 8003e2c:	00000000 	.word	0x00000000

08003e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e30:	f3ef 8009 	mrs	r0, PSP
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <pxCurrentTCBConst>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f01e 0f10 	tst.w	lr, #16
 8003e40:	bf08      	it	eq
 8003e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4a:	6010      	str	r0, [r2, #0]
 8003e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e54:	b672      	cpsid	i
 8003e56:	f380 8811 	msr	BASEPRI, r0
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	b662      	cpsie	i
 8003e64:	f7fe ffc2 	bl	8002dec <vTaskSwitchContext>
 8003e68:	f04f 0000 	mov.w	r0, #0
 8003e6c:	f380 8811 	msr	BASEPRI, r0
 8003e70:	bc09      	pop	{r0, r3}
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	6808      	ldr	r0, [r1, #0]
 8003e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7a:	f01e 0f10 	tst.w	lr, #16
 8003e7e:	bf08      	it	eq
 8003e80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e84:	f380 8809 	msr	PSP, r0
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop

08003e90 <pxCurrentTCBConst>:
 8003e90:	20000760 	.word	0x20000760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop

08003e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	b672      	cpsid	i
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	b662      	cpsie	i
 8003eb2:	607b      	str	r3, [r7, #4]
}
 8003eb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003eb6:	f7fe ff01 	bl	8002cbc <xTaskIncrementTick>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <xPortSysTickHandler+0x44>)
 8003ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f383 8811 	msr	BASEPRI, r3
}
 8003ed2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <vPortSetupTimerInterrupt+0x34>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <vPortSetupTimerInterrupt+0x38>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <vPortSetupTimerInterrupt+0x3c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <vPortSetupTimerInterrupt+0x40>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	099b      	lsrs	r3, r3, #6
 8003efc:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <vPortSetupTimerInterrupt+0x44>)
 8003efe:	3b01      	subs	r3, #1
 8003f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <vPortSetupTimerInterrupt+0x34>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010
 8003f18:	e000e018 	.word	0xe000e018
 8003f1c:	20000010 	.word	0x20000010
 8003f20:	10624dd3 	.word	0x10624dd3
 8003f24:	e000e014 	.word	0xe000e014

08003f28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f38 <vPortEnableVFP+0x10>
 8003f2c:	6801      	ldr	r1, [r0, #0]
 8003f2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f32:	6001      	str	r1, [r0, #0]
 8003f34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f36:	bf00      	nop
 8003f38:	e000ed88 	.word	0xe000ed88

08003f3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f42:	f3ef 8305 	mrs	r3, IPSR
 8003f46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	d916      	bls.n	8003f7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f4e:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <vPortValidateInterruptPriority+0x78>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <vPortValidateInterruptPriority+0x7c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	7afa      	ldrb	r2, [r7, #11]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d20c      	bcs.n	8003f7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	b672      	cpsid	i
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	b662      	cpsie	i
 8003f76:	607b      	str	r3, [r7, #4]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <vPortValidateInterruptPriority+0x80>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <vPortValidateInterruptPriority+0x84>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d90c      	bls.n	8003fa6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	b672      	cpsid	i
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	b662      	cpsie	i
 8003fa0:	603b      	str	r3, [r7, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <vPortValidateInterruptPriority+0x68>
	}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000e3f0 	.word	0xe000e3f0
 8003fb8:	20000d8c 	.word	0x20000d8c
 8003fbc:	e000ed0c 	.word	0xe000ed0c
 8003fc0:	20000d90 	.word	0x20000d90

08003fc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003fd0:	f7fe fdc4 	bl	8002b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <pvPortMalloc+0x180>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003fdc:	f000 f91a 	bl	8004214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <pvPortMalloc+0x184>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 8092 	bne.w	8004112 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01f      	beq.n	8004034 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f023 0307 	bic.w	r3, r3, #7
 800400c:	3308      	adds	r3, #8
 800400e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00c      	beq.n	8004034 <pvPortMalloc+0x70>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	b672      	cpsid	i
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	b662      	cpsie	i
 800402e:	617b      	str	r3, [r7, #20]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d06b      	beq.n	8004112 <pvPortMalloc+0x14e>
 800403a:	4b44      	ldr	r3, [pc, #272]	; (800414c <pvPortMalloc+0x188>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d866      	bhi.n	8004112 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004044:	4b42      	ldr	r3, [pc, #264]	; (8004150 <pvPortMalloc+0x18c>)
 8004046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004048:	4b41      	ldr	r3, [pc, #260]	; (8004150 <pvPortMalloc+0x18c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800404e:	e004      	b.n	800405a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d903      	bls.n	800406c <pvPortMalloc+0xa8>
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f1      	bne.n	8004050 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <pvPortMalloc+0x180>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	429a      	cmp	r2, r3
 8004074:	d04d      	beq.n	8004112 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2208      	movs	r2, #8
 800407c:	4413      	add	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	2308      	movs	r3, #8
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	429a      	cmp	r2, r3
 8004096:	d921      	bls.n	80040dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <pvPortMalloc+0x100>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	b672      	cpsid	i
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	b662      	cpsie	i
 80040be:	613b      	str	r3, [r7, #16]
}
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1ad2      	subs	r2, r2, r3
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040d6:	69b8      	ldr	r0, [r7, #24]
 80040d8:	f000 f8fe 	bl	80042d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <pvPortMalloc+0x188>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	4a19      	ldr	r2, [pc, #100]	; (800414c <pvPortMalloc+0x188>)
 80040e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <pvPortMalloc+0x188>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b19      	ldr	r3, [pc, #100]	; (8004154 <pvPortMalloc+0x190>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d203      	bcs.n	80040fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <pvPortMalloc+0x188>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a16      	ldr	r2, [pc, #88]	; (8004154 <pvPortMalloc+0x190>)
 80040fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <pvPortMalloc+0x184>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	431a      	orrs	r2, r3
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004112:	f7fe fd31 	bl	8002b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00c      	beq.n	800413a <pvPortMalloc+0x176>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	b672      	cpsid	i
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	b662      	cpsie	i
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <pvPortMalloc+0x174>
	return pvReturn;
 800413a:	69fb      	ldr	r3, [r7, #28]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3728      	adds	r7, #40	; 0x28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	2000499c 	.word	0x2000499c
 8004148:	200049a8 	.word	0x200049a8
 800414c:	200049a0 	.word	0x200049a0
 8004150:	20004994 	.word	0x20004994
 8004154:	200049a4 	.word	0x200049a4

08004158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d04c      	beq.n	8004204 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800416a:	2308      	movs	r3, #8
 800416c:	425b      	negs	r3, r3
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4413      	add	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4b23      	ldr	r3, [pc, #140]	; (800420c <vPortFree+0xb4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10c      	bne.n	80041a0 <vPortFree+0x48>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	b672      	cpsid	i
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	b662      	cpsie	i
 800419a:	60fb      	str	r3, [r7, #12]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <vPortFree+0x6a>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	b672      	cpsid	i
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	b662      	cpsie	i
 80041bc:	60bb      	str	r3, [r7, #8]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <vPortFree+0xb4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d019      	beq.n	8004204 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d115      	bne.n	8004204 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <vPortFree+0xb4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	401a      	ands	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80041e8:	f7fe fcb8 	bl	8002b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <vPortFree+0xb8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	4a06      	ldr	r2, [pc, #24]	; (8004210 <vPortFree+0xb8>)
 80041f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041fa:	6938      	ldr	r0, [r7, #16]
 80041fc:	f000 f86c 	bl	80042d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004200:	f7fe fcba 	bl	8002b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004204:	bf00      	nop
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200049a8 	.word	0x200049a8
 8004210:	200049a0 	.word	0x200049a0

08004214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800421a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800421e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004220:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <prvHeapInit+0xac>)
 8004222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00c      	beq.n	8004248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3307      	adds	r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <prvHeapInit+0xac>)
 8004244:	4413      	add	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <prvHeapInit+0xb0>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <prvHeapInit+0xb0>)
 8004254:	2200      	movs	r2, #0
 8004256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4413      	add	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004260:	2208      	movs	r2, #8
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <prvHeapInit+0xb4>)
 8004274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <prvHeapInit+0xb4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <prvHeapInit+0xb4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <prvHeapInit+0xb4>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <prvHeapInit+0xb8>)
 80042a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <prvHeapInit+0xbc>)
 80042aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <prvHeapInit+0xc0>)
 80042ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042b2:	601a      	str	r2, [r3, #0]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000d94 	.word	0x20000d94
 80042c4:	20004994 	.word	0x20004994
 80042c8:	2000499c 	.word	0x2000499c
 80042cc:	200049a4 	.word	0x200049a4
 80042d0:	200049a0 	.word	0x200049a0
 80042d4:	200049a8 	.word	0x200049a8

080042d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042e0:	4b28      	ldr	r3, [pc, #160]	; (8004384 <prvInsertBlockIntoFreeList+0xac>)
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e002      	b.n	80042ec <prvInsertBlockIntoFreeList+0x14>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d8f7      	bhi.n	80042e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4413      	add	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d108      	bne.n	800431a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	441a      	add	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	441a      	add	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d118      	bne.n	8004360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <prvInsertBlockIntoFreeList+0xb0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d00d      	beq.n	8004356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	441a      	add	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e008      	b.n	8004368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <prvInsertBlockIntoFreeList+0xb0>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e003      	b.n	8004368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d002      	beq.n	8004376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20004994 	.word	0x20004994
 8004388:	2000499c 	.word	0x2000499c

0800438c <__errno>:
 800438c:	4b01      	ldr	r3, [pc, #4]	; (8004394 <__errno+0x8>)
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000020 	.word	0x20000020

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4d0d      	ldr	r5, [pc, #52]	; (80043d0 <__libc_init_array+0x38>)
 800439c:	4c0d      	ldr	r4, [pc, #52]	; (80043d4 <__libc_init_array+0x3c>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	2600      	movs	r6, #0
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	4d0b      	ldr	r5, [pc, #44]	; (80043d8 <__libc_init_array+0x40>)
 80043aa:	4c0c      	ldr	r4, [pc, #48]	; (80043dc <__libc_init_array+0x44>)
 80043ac:	f000 fffa 	bl	80053a4 <_init>
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	2600      	movs	r6, #0
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	08005530 	.word	0x08005530
 80043d4:	08005530 	.word	0x08005530
 80043d8:	08005530 	.word	0x08005530
 80043dc:	08005534 	.word	0x08005534

080043e0 <memcpy>:
 80043e0:	440a      	add	r2, r1
 80043e2:	4291      	cmp	r1, r2
 80043e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043e8:	d100      	bne.n	80043ec <memcpy+0xc>
 80043ea:	4770      	bx	lr
 80043ec:	b510      	push	{r4, lr}
 80043ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f6:	4291      	cmp	r1, r2
 80043f8:	d1f9      	bne.n	80043ee <memcpy+0xe>
 80043fa:	bd10      	pop	{r4, pc}

080043fc <memset>:
 80043fc:	4402      	add	r2, r0
 80043fe:	4603      	mov	r3, r0
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	f803 1b01 	strb.w	r1, [r3], #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>

0800440c <iprintf>:
 800440c:	b40f      	push	{r0, r1, r2, r3}
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <iprintf+0x2c>)
 8004410:	b513      	push	{r0, r1, r4, lr}
 8004412:	681c      	ldr	r4, [r3, #0]
 8004414:	b124      	cbz	r4, 8004420 <iprintf+0x14>
 8004416:	69a3      	ldr	r3, [r4, #24]
 8004418:	b913      	cbnz	r3, 8004420 <iprintf+0x14>
 800441a:	4620      	mov	r0, r4
 800441c:	f000 fa5e 	bl	80048dc <__sinit>
 8004420:	ab05      	add	r3, sp, #20
 8004422:	9a04      	ldr	r2, [sp, #16]
 8004424:	68a1      	ldr	r1, [r4, #8]
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	4620      	mov	r0, r4
 800442a:	f000 fc2f 	bl	8004c8c <_vfiprintf_r>
 800442e:	b002      	add	sp, #8
 8004430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004434:	b004      	add	sp, #16
 8004436:	4770      	bx	lr
 8004438:	20000020 	.word	0x20000020

0800443c <_puts_r>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	460e      	mov	r6, r1
 8004440:	4605      	mov	r5, r0
 8004442:	b118      	cbz	r0, 800444c <_puts_r+0x10>
 8004444:	6983      	ldr	r3, [r0, #24]
 8004446:	b90b      	cbnz	r3, 800444c <_puts_r+0x10>
 8004448:	f000 fa48 	bl	80048dc <__sinit>
 800444c:	69ab      	ldr	r3, [r5, #24]
 800444e:	68ac      	ldr	r4, [r5, #8]
 8004450:	b913      	cbnz	r3, 8004458 <_puts_r+0x1c>
 8004452:	4628      	mov	r0, r5
 8004454:	f000 fa42 	bl	80048dc <__sinit>
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <_puts_r+0xd0>)
 800445a:	429c      	cmp	r4, r3
 800445c:	d120      	bne.n	80044a0 <_puts_r+0x64>
 800445e:	686c      	ldr	r4, [r5, #4]
 8004460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004462:	07db      	lsls	r3, r3, #31
 8004464:	d405      	bmi.n	8004472 <_puts_r+0x36>
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	0598      	lsls	r0, r3, #22
 800446a:	d402      	bmi.n	8004472 <_puts_r+0x36>
 800446c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800446e:	f000 fad3 	bl	8004a18 <__retarget_lock_acquire_recursive>
 8004472:	89a3      	ldrh	r3, [r4, #12]
 8004474:	0719      	lsls	r1, r3, #28
 8004476:	d51d      	bpl.n	80044b4 <_puts_r+0x78>
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	b1db      	cbz	r3, 80044b4 <_puts_r+0x78>
 800447c:	3e01      	subs	r6, #1
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004484:	3b01      	subs	r3, #1
 8004486:	60a3      	str	r3, [r4, #8]
 8004488:	bb39      	cbnz	r1, 80044da <_puts_r+0x9e>
 800448a:	2b00      	cmp	r3, #0
 800448c:	da38      	bge.n	8004500 <_puts_r+0xc4>
 800448e:	4622      	mov	r2, r4
 8004490:	210a      	movs	r1, #10
 8004492:	4628      	mov	r0, r5
 8004494:	f000 f848 	bl	8004528 <__swbuf_r>
 8004498:	3001      	adds	r0, #1
 800449a:	d011      	beq.n	80044c0 <_puts_r+0x84>
 800449c:	250a      	movs	r5, #10
 800449e:	e011      	b.n	80044c4 <_puts_r+0x88>
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <_puts_r+0xd4>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d101      	bne.n	80044aa <_puts_r+0x6e>
 80044a6:	68ac      	ldr	r4, [r5, #8]
 80044a8:	e7da      	b.n	8004460 <_puts_r+0x24>
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <_puts_r+0xd8>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	bf08      	it	eq
 80044b0:	68ec      	ldreq	r4, [r5, #12]
 80044b2:	e7d5      	b.n	8004460 <_puts_r+0x24>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 f888 	bl	80045cc <__swsetup_r>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d0dd      	beq.n	800447c <_puts_r+0x40>
 80044c0:	f04f 35ff 	mov.w	r5, #4294967295
 80044c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044c6:	07da      	lsls	r2, r3, #31
 80044c8:	d405      	bmi.n	80044d6 <_puts_r+0x9a>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	059b      	lsls	r3, r3, #22
 80044ce:	d402      	bmi.n	80044d6 <_puts_r+0x9a>
 80044d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d2:	f000 faa2 	bl	8004a1a <__retarget_lock_release_recursive>
 80044d6:	4628      	mov	r0, r5
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da04      	bge.n	80044e8 <_puts_r+0xac>
 80044de:	69a2      	ldr	r2, [r4, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	dc06      	bgt.n	80044f2 <_puts_r+0xb6>
 80044e4:	290a      	cmp	r1, #10
 80044e6:	d004      	beq.n	80044f2 <_puts_r+0xb6>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	6022      	str	r2, [r4, #0]
 80044ee:	7019      	strb	r1, [r3, #0]
 80044f0:	e7c5      	b.n	800447e <_puts_r+0x42>
 80044f2:	4622      	mov	r2, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 f817 	bl	8004528 <__swbuf_r>
 80044fa:	3001      	adds	r0, #1
 80044fc:	d1bf      	bne.n	800447e <_puts_r+0x42>
 80044fe:	e7df      	b.n	80044c0 <_puts_r+0x84>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	250a      	movs	r5, #10
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	6022      	str	r2, [r4, #0]
 8004508:	701d      	strb	r5, [r3, #0]
 800450a:	e7db      	b.n	80044c4 <_puts_r+0x88>
 800450c:	080054b4 	.word	0x080054b4
 8004510:	080054d4 	.word	0x080054d4
 8004514:	08005494 	.word	0x08005494

08004518 <puts>:
 8004518:	4b02      	ldr	r3, [pc, #8]	; (8004524 <puts+0xc>)
 800451a:	4601      	mov	r1, r0
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f7ff bf8d 	b.w	800443c <_puts_r>
 8004522:	bf00      	nop
 8004524:	20000020 	.word	0x20000020

08004528 <__swbuf_r>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	460e      	mov	r6, r1
 800452c:	4614      	mov	r4, r2
 800452e:	4605      	mov	r5, r0
 8004530:	b118      	cbz	r0, 800453a <__swbuf_r+0x12>
 8004532:	6983      	ldr	r3, [r0, #24]
 8004534:	b90b      	cbnz	r3, 800453a <__swbuf_r+0x12>
 8004536:	f000 f9d1 	bl	80048dc <__sinit>
 800453a:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <__swbuf_r+0x98>)
 800453c:	429c      	cmp	r4, r3
 800453e:	d12b      	bne.n	8004598 <__swbuf_r+0x70>
 8004540:	686c      	ldr	r4, [r5, #4]
 8004542:	69a3      	ldr	r3, [r4, #24]
 8004544:	60a3      	str	r3, [r4, #8]
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	071a      	lsls	r2, r3, #28
 800454a:	d52f      	bpl.n	80045ac <__swbuf_r+0x84>
 800454c:	6923      	ldr	r3, [r4, #16]
 800454e:	b36b      	cbz	r3, 80045ac <__swbuf_r+0x84>
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1ac0      	subs	r0, r0, r3
 8004556:	6963      	ldr	r3, [r4, #20]
 8004558:	b2f6      	uxtb	r6, r6
 800455a:	4283      	cmp	r3, r0
 800455c:	4637      	mov	r7, r6
 800455e:	dc04      	bgt.n	800456a <__swbuf_r+0x42>
 8004560:	4621      	mov	r1, r4
 8004562:	4628      	mov	r0, r5
 8004564:	f000 f926 	bl	80047b4 <_fflush_r>
 8004568:	bb30      	cbnz	r0, 80045b8 <__swbuf_r+0x90>
 800456a:	68a3      	ldr	r3, [r4, #8]
 800456c:	3b01      	subs	r3, #1
 800456e:	60a3      	str	r3, [r4, #8]
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	6022      	str	r2, [r4, #0]
 8004576:	701e      	strb	r6, [r3, #0]
 8004578:	6963      	ldr	r3, [r4, #20]
 800457a:	3001      	adds	r0, #1
 800457c:	4283      	cmp	r3, r0
 800457e:	d004      	beq.n	800458a <__swbuf_r+0x62>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	07db      	lsls	r3, r3, #31
 8004584:	d506      	bpl.n	8004594 <__swbuf_r+0x6c>
 8004586:	2e0a      	cmp	r6, #10
 8004588:	d104      	bne.n	8004594 <__swbuf_r+0x6c>
 800458a:	4621      	mov	r1, r4
 800458c:	4628      	mov	r0, r5
 800458e:	f000 f911 	bl	80047b4 <_fflush_r>
 8004592:	b988      	cbnz	r0, 80045b8 <__swbuf_r+0x90>
 8004594:	4638      	mov	r0, r7
 8004596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <__swbuf_r+0x9c>)
 800459a:	429c      	cmp	r4, r3
 800459c:	d101      	bne.n	80045a2 <__swbuf_r+0x7a>
 800459e:	68ac      	ldr	r4, [r5, #8]
 80045a0:	e7cf      	b.n	8004542 <__swbuf_r+0x1a>
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <__swbuf_r+0xa0>)
 80045a4:	429c      	cmp	r4, r3
 80045a6:	bf08      	it	eq
 80045a8:	68ec      	ldreq	r4, [r5, #12]
 80045aa:	e7ca      	b.n	8004542 <__swbuf_r+0x1a>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f80c 	bl	80045cc <__swsetup_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d0cb      	beq.n	8004550 <__swbuf_r+0x28>
 80045b8:	f04f 37ff 	mov.w	r7, #4294967295
 80045bc:	e7ea      	b.n	8004594 <__swbuf_r+0x6c>
 80045be:	bf00      	nop
 80045c0:	080054b4 	.word	0x080054b4
 80045c4:	080054d4 	.word	0x080054d4
 80045c8:	08005494 	.word	0x08005494

080045cc <__swsetup_r>:
 80045cc:	4b32      	ldr	r3, [pc, #200]	; (8004698 <__swsetup_r+0xcc>)
 80045ce:	b570      	push	{r4, r5, r6, lr}
 80045d0:	681d      	ldr	r5, [r3, #0]
 80045d2:	4606      	mov	r6, r0
 80045d4:	460c      	mov	r4, r1
 80045d6:	b125      	cbz	r5, 80045e2 <__swsetup_r+0x16>
 80045d8:	69ab      	ldr	r3, [r5, #24]
 80045da:	b913      	cbnz	r3, 80045e2 <__swsetup_r+0x16>
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 f97d 	bl	80048dc <__sinit>
 80045e2:	4b2e      	ldr	r3, [pc, #184]	; (800469c <__swsetup_r+0xd0>)
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d10f      	bne.n	8004608 <__swsetup_r+0x3c>
 80045e8:	686c      	ldr	r4, [r5, #4]
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045f0:	0719      	lsls	r1, r3, #28
 80045f2:	d42c      	bmi.n	800464e <__swsetup_r+0x82>
 80045f4:	06dd      	lsls	r5, r3, #27
 80045f6:	d411      	bmi.n	800461c <__swsetup_r+0x50>
 80045f8:	2309      	movs	r3, #9
 80045fa:	6033      	str	r3, [r6, #0]
 80045fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	e03e      	b.n	8004686 <__swsetup_r+0xba>
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <__swsetup_r+0xd4>)
 800460a:	429c      	cmp	r4, r3
 800460c:	d101      	bne.n	8004612 <__swsetup_r+0x46>
 800460e:	68ac      	ldr	r4, [r5, #8]
 8004610:	e7eb      	b.n	80045ea <__swsetup_r+0x1e>
 8004612:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <__swsetup_r+0xd8>)
 8004614:	429c      	cmp	r4, r3
 8004616:	bf08      	it	eq
 8004618:	68ec      	ldreq	r4, [r5, #12]
 800461a:	e7e6      	b.n	80045ea <__swsetup_r+0x1e>
 800461c:	0758      	lsls	r0, r3, #29
 800461e:	d512      	bpl.n	8004646 <__swsetup_r+0x7a>
 8004620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004622:	b141      	cbz	r1, 8004636 <__swsetup_r+0x6a>
 8004624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004628:	4299      	cmp	r1, r3
 800462a:	d002      	beq.n	8004632 <__swsetup_r+0x66>
 800462c:	4630      	mov	r0, r6
 800462e:	f000 fa59 	bl	8004ae4 <_free_r>
 8004632:	2300      	movs	r3, #0
 8004634:	6363      	str	r3, [r4, #52]	; 0x34
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800463c:	81a3      	strh	r3, [r4, #12]
 800463e:	2300      	movs	r3, #0
 8004640:	6063      	str	r3, [r4, #4]
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f043 0308 	orr.w	r3, r3, #8
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	b94b      	cbnz	r3, 8004666 <__swsetup_r+0x9a>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465c:	d003      	beq.n	8004666 <__swsetup_r+0x9a>
 800465e:	4621      	mov	r1, r4
 8004660:	4630      	mov	r0, r6
 8004662:	f000 f9ff 	bl	8004a64 <__smakebuf_r>
 8004666:	89a0      	ldrh	r0, [r4, #12]
 8004668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800466c:	f010 0301 	ands.w	r3, r0, #1
 8004670:	d00a      	beq.n	8004688 <__swsetup_r+0xbc>
 8004672:	2300      	movs	r3, #0
 8004674:	60a3      	str	r3, [r4, #8]
 8004676:	6963      	ldr	r3, [r4, #20]
 8004678:	425b      	negs	r3, r3
 800467a:	61a3      	str	r3, [r4, #24]
 800467c:	6923      	ldr	r3, [r4, #16]
 800467e:	b943      	cbnz	r3, 8004692 <__swsetup_r+0xc6>
 8004680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004684:	d1ba      	bne.n	80045fc <__swsetup_r+0x30>
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	0781      	lsls	r1, r0, #30
 800468a:	bf58      	it	pl
 800468c:	6963      	ldrpl	r3, [r4, #20]
 800468e:	60a3      	str	r3, [r4, #8]
 8004690:	e7f4      	b.n	800467c <__swsetup_r+0xb0>
 8004692:	2000      	movs	r0, #0
 8004694:	e7f7      	b.n	8004686 <__swsetup_r+0xba>
 8004696:	bf00      	nop
 8004698:	20000020 	.word	0x20000020
 800469c:	080054b4 	.word	0x080054b4
 80046a0:	080054d4 	.word	0x080054d4
 80046a4:	08005494 	.word	0x08005494

080046a8 <__sflush_r>:
 80046a8:	898a      	ldrh	r2, [r1, #12]
 80046aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ae:	4605      	mov	r5, r0
 80046b0:	0710      	lsls	r0, r2, #28
 80046b2:	460c      	mov	r4, r1
 80046b4:	d458      	bmi.n	8004768 <__sflush_r+0xc0>
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	dc05      	bgt.n	80046c8 <__sflush_r+0x20>
 80046bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	dc02      	bgt.n	80046c8 <__sflush_r+0x20>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ca:	2e00      	cmp	r6, #0
 80046cc:	d0f9      	beq.n	80046c2 <__sflush_r+0x1a>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046d4:	682f      	ldr	r7, [r5, #0]
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	d032      	beq.n	8004740 <__sflush_r+0x98>
 80046da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	075a      	lsls	r2, r3, #29
 80046e0:	d505      	bpl.n	80046ee <__sflush_r+0x46>
 80046e2:	6863      	ldr	r3, [r4, #4]
 80046e4:	1ac0      	subs	r0, r0, r3
 80046e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046e8:	b10b      	cbz	r3, 80046ee <__sflush_r+0x46>
 80046ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046ec:	1ac0      	subs	r0, r0, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	4602      	mov	r2, r0
 80046f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046f4:	6a21      	ldr	r1, [r4, #32]
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b0      	blx	r6
 80046fa:	1c43      	adds	r3, r0, #1
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	d106      	bne.n	800470e <__sflush_r+0x66>
 8004700:	6829      	ldr	r1, [r5, #0]
 8004702:	291d      	cmp	r1, #29
 8004704:	d82c      	bhi.n	8004760 <__sflush_r+0xb8>
 8004706:	4a2a      	ldr	r2, [pc, #168]	; (80047b0 <__sflush_r+0x108>)
 8004708:	40ca      	lsrs	r2, r1
 800470a:	07d6      	lsls	r6, r2, #31
 800470c:	d528      	bpl.n	8004760 <__sflush_r+0xb8>
 800470e:	2200      	movs	r2, #0
 8004710:	6062      	str	r2, [r4, #4]
 8004712:	04d9      	lsls	r1, r3, #19
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	6022      	str	r2, [r4, #0]
 8004718:	d504      	bpl.n	8004724 <__sflush_r+0x7c>
 800471a:	1c42      	adds	r2, r0, #1
 800471c:	d101      	bne.n	8004722 <__sflush_r+0x7a>
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	b903      	cbnz	r3, 8004724 <__sflush_r+0x7c>
 8004722:	6560      	str	r0, [r4, #84]	; 0x54
 8004724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004726:	602f      	str	r7, [r5, #0]
 8004728:	2900      	cmp	r1, #0
 800472a:	d0ca      	beq.n	80046c2 <__sflush_r+0x1a>
 800472c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004730:	4299      	cmp	r1, r3
 8004732:	d002      	beq.n	800473a <__sflush_r+0x92>
 8004734:	4628      	mov	r0, r5
 8004736:	f000 f9d5 	bl	8004ae4 <_free_r>
 800473a:	2000      	movs	r0, #0
 800473c:	6360      	str	r0, [r4, #52]	; 0x34
 800473e:	e7c1      	b.n	80046c4 <__sflush_r+0x1c>
 8004740:	6a21      	ldr	r1, [r4, #32]
 8004742:	2301      	movs	r3, #1
 8004744:	4628      	mov	r0, r5
 8004746:	47b0      	blx	r6
 8004748:	1c41      	adds	r1, r0, #1
 800474a:	d1c7      	bne.n	80046dc <__sflush_r+0x34>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0c4      	beq.n	80046dc <__sflush_r+0x34>
 8004752:	2b1d      	cmp	r3, #29
 8004754:	d001      	beq.n	800475a <__sflush_r+0xb2>
 8004756:	2b16      	cmp	r3, #22
 8004758:	d101      	bne.n	800475e <__sflush_r+0xb6>
 800475a:	602f      	str	r7, [r5, #0]
 800475c:	e7b1      	b.n	80046c2 <__sflush_r+0x1a>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	e7ad      	b.n	80046c4 <__sflush_r+0x1c>
 8004768:	690f      	ldr	r7, [r1, #16]
 800476a:	2f00      	cmp	r7, #0
 800476c:	d0a9      	beq.n	80046c2 <__sflush_r+0x1a>
 800476e:	0793      	lsls	r3, r2, #30
 8004770:	680e      	ldr	r6, [r1, #0]
 8004772:	bf08      	it	eq
 8004774:	694b      	ldreq	r3, [r1, #20]
 8004776:	600f      	str	r7, [r1, #0]
 8004778:	bf18      	it	ne
 800477a:	2300      	movne	r3, #0
 800477c:	eba6 0807 	sub.w	r8, r6, r7
 8004780:	608b      	str	r3, [r1, #8]
 8004782:	f1b8 0f00 	cmp.w	r8, #0
 8004786:	dd9c      	ble.n	80046c2 <__sflush_r+0x1a>
 8004788:	6a21      	ldr	r1, [r4, #32]
 800478a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800478c:	4643      	mov	r3, r8
 800478e:	463a      	mov	r2, r7
 8004790:	4628      	mov	r0, r5
 8004792:	47b0      	blx	r6
 8004794:	2800      	cmp	r0, #0
 8004796:	dc06      	bgt.n	80047a6 <__sflush_r+0xfe>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	e78e      	b.n	80046c4 <__sflush_r+0x1c>
 80047a6:	4407      	add	r7, r0
 80047a8:	eba8 0800 	sub.w	r8, r8, r0
 80047ac:	e7e9      	b.n	8004782 <__sflush_r+0xda>
 80047ae:	bf00      	nop
 80047b0:	20400001 	.word	0x20400001

080047b4 <_fflush_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	690b      	ldr	r3, [r1, #16]
 80047b8:	4605      	mov	r5, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	b913      	cbnz	r3, 80047c4 <_fflush_r+0x10>
 80047be:	2500      	movs	r5, #0
 80047c0:	4628      	mov	r0, r5
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	b118      	cbz	r0, 80047ce <_fflush_r+0x1a>
 80047c6:	6983      	ldr	r3, [r0, #24]
 80047c8:	b90b      	cbnz	r3, 80047ce <_fflush_r+0x1a>
 80047ca:	f000 f887 	bl	80048dc <__sinit>
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <_fflush_r+0x6c>)
 80047d0:	429c      	cmp	r4, r3
 80047d2:	d11b      	bne.n	800480c <_fflush_r+0x58>
 80047d4:	686c      	ldr	r4, [r5, #4]
 80047d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0ef      	beq.n	80047be <_fflush_r+0xa>
 80047de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047e0:	07d0      	lsls	r0, r2, #31
 80047e2:	d404      	bmi.n	80047ee <_fflush_r+0x3a>
 80047e4:	0599      	lsls	r1, r3, #22
 80047e6:	d402      	bmi.n	80047ee <_fflush_r+0x3a>
 80047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ea:	f000 f915 	bl	8004a18 <__retarget_lock_acquire_recursive>
 80047ee:	4628      	mov	r0, r5
 80047f0:	4621      	mov	r1, r4
 80047f2:	f7ff ff59 	bl	80046a8 <__sflush_r>
 80047f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047f8:	07da      	lsls	r2, r3, #31
 80047fa:	4605      	mov	r5, r0
 80047fc:	d4e0      	bmi.n	80047c0 <_fflush_r+0xc>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	059b      	lsls	r3, r3, #22
 8004802:	d4dd      	bmi.n	80047c0 <_fflush_r+0xc>
 8004804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004806:	f000 f908 	bl	8004a1a <__retarget_lock_release_recursive>
 800480a:	e7d9      	b.n	80047c0 <_fflush_r+0xc>
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <_fflush_r+0x70>)
 800480e:	429c      	cmp	r4, r3
 8004810:	d101      	bne.n	8004816 <_fflush_r+0x62>
 8004812:	68ac      	ldr	r4, [r5, #8]
 8004814:	e7df      	b.n	80047d6 <_fflush_r+0x22>
 8004816:	4b04      	ldr	r3, [pc, #16]	; (8004828 <_fflush_r+0x74>)
 8004818:	429c      	cmp	r4, r3
 800481a:	bf08      	it	eq
 800481c:	68ec      	ldreq	r4, [r5, #12]
 800481e:	e7da      	b.n	80047d6 <_fflush_r+0x22>
 8004820:	080054b4 	.word	0x080054b4
 8004824:	080054d4 	.word	0x080054d4
 8004828:	08005494 	.word	0x08005494

0800482c <std>:
 800482c:	2300      	movs	r3, #0
 800482e:	b510      	push	{r4, lr}
 8004830:	4604      	mov	r4, r0
 8004832:	e9c0 3300 	strd	r3, r3, [r0]
 8004836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800483a:	6083      	str	r3, [r0, #8]
 800483c:	8181      	strh	r1, [r0, #12]
 800483e:	6643      	str	r3, [r0, #100]	; 0x64
 8004840:	81c2      	strh	r2, [r0, #14]
 8004842:	6183      	str	r3, [r0, #24]
 8004844:	4619      	mov	r1, r3
 8004846:	2208      	movs	r2, #8
 8004848:	305c      	adds	r0, #92	; 0x5c
 800484a:	f7ff fdd7 	bl	80043fc <memset>
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <std+0x38>)
 8004850:	6263      	str	r3, [r4, #36]	; 0x24
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <std+0x3c>)
 8004854:	62a3      	str	r3, [r4, #40]	; 0x28
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <std+0x40>)
 8004858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <std+0x44>)
 800485c:	6224      	str	r4, [r4, #32]
 800485e:	6323      	str	r3, [r4, #48]	; 0x30
 8004860:	bd10      	pop	{r4, pc}
 8004862:	bf00      	nop
 8004864:	08005235 	.word	0x08005235
 8004868:	08005257 	.word	0x08005257
 800486c:	0800528f 	.word	0x0800528f
 8004870:	080052b3 	.word	0x080052b3

08004874 <_cleanup_r>:
 8004874:	4901      	ldr	r1, [pc, #4]	; (800487c <_cleanup_r+0x8>)
 8004876:	f000 b8af 	b.w	80049d8 <_fwalk_reent>
 800487a:	bf00      	nop
 800487c:	080047b5 	.word	0x080047b5

08004880 <__sfmoreglue>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	1e4a      	subs	r2, r1, #1
 8004884:	2568      	movs	r5, #104	; 0x68
 8004886:	4355      	muls	r5, r2
 8004888:	460e      	mov	r6, r1
 800488a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800488e:	f000 f979 	bl	8004b84 <_malloc_r>
 8004892:	4604      	mov	r4, r0
 8004894:	b140      	cbz	r0, 80048a8 <__sfmoreglue+0x28>
 8004896:	2100      	movs	r1, #0
 8004898:	e9c0 1600 	strd	r1, r6, [r0]
 800489c:	300c      	adds	r0, #12
 800489e:	60a0      	str	r0, [r4, #8]
 80048a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048a4:	f7ff fdaa 	bl	80043fc <memset>
 80048a8:	4620      	mov	r0, r4
 80048aa:	bd70      	pop	{r4, r5, r6, pc}

080048ac <__sfp_lock_acquire>:
 80048ac:	4801      	ldr	r0, [pc, #4]	; (80048b4 <__sfp_lock_acquire+0x8>)
 80048ae:	f000 b8b3 	b.w	8004a18 <__retarget_lock_acquire_recursive>
 80048b2:	bf00      	nop
 80048b4:	20004a08 	.word	0x20004a08

080048b8 <__sfp_lock_release>:
 80048b8:	4801      	ldr	r0, [pc, #4]	; (80048c0 <__sfp_lock_release+0x8>)
 80048ba:	f000 b8ae 	b.w	8004a1a <__retarget_lock_release_recursive>
 80048be:	bf00      	nop
 80048c0:	20004a08 	.word	0x20004a08

080048c4 <__sinit_lock_acquire>:
 80048c4:	4801      	ldr	r0, [pc, #4]	; (80048cc <__sinit_lock_acquire+0x8>)
 80048c6:	f000 b8a7 	b.w	8004a18 <__retarget_lock_acquire_recursive>
 80048ca:	bf00      	nop
 80048cc:	20004a03 	.word	0x20004a03

080048d0 <__sinit_lock_release>:
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <__sinit_lock_release+0x8>)
 80048d2:	f000 b8a2 	b.w	8004a1a <__retarget_lock_release_recursive>
 80048d6:	bf00      	nop
 80048d8:	20004a03 	.word	0x20004a03

080048dc <__sinit>:
 80048dc:	b510      	push	{r4, lr}
 80048de:	4604      	mov	r4, r0
 80048e0:	f7ff fff0 	bl	80048c4 <__sinit_lock_acquire>
 80048e4:	69a3      	ldr	r3, [r4, #24]
 80048e6:	b11b      	cbz	r3, 80048f0 <__sinit+0x14>
 80048e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ec:	f7ff bff0 	b.w	80048d0 <__sinit_lock_release>
 80048f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048f4:	6523      	str	r3, [r4, #80]	; 0x50
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <__sinit+0x68>)
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <__sinit+0x6c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80048fe:	42a3      	cmp	r3, r4
 8004900:	bf04      	itt	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	61a3      	streq	r3, [r4, #24]
 8004906:	4620      	mov	r0, r4
 8004908:	f000 f820 	bl	800494c <__sfp>
 800490c:	6060      	str	r0, [r4, #4]
 800490e:	4620      	mov	r0, r4
 8004910:	f000 f81c 	bl	800494c <__sfp>
 8004914:	60a0      	str	r0, [r4, #8]
 8004916:	4620      	mov	r0, r4
 8004918:	f000 f818 	bl	800494c <__sfp>
 800491c:	2200      	movs	r2, #0
 800491e:	60e0      	str	r0, [r4, #12]
 8004920:	2104      	movs	r1, #4
 8004922:	6860      	ldr	r0, [r4, #4]
 8004924:	f7ff ff82 	bl	800482c <std>
 8004928:	68a0      	ldr	r0, [r4, #8]
 800492a:	2201      	movs	r2, #1
 800492c:	2109      	movs	r1, #9
 800492e:	f7ff ff7d 	bl	800482c <std>
 8004932:	68e0      	ldr	r0, [r4, #12]
 8004934:	2202      	movs	r2, #2
 8004936:	2112      	movs	r1, #18
 8004938:	f7ff ff78 	bl	800482c <std>
 800493c:	2301      	movs	r3, #1
 800493e:	61a3      	str	r3, [r4, #24]
 8004940:	e7d2      	b.n	80048e8 <__sinit+0xc>
 8004942:	bf00      	nop
 8004944:	08005490 	.word	0x08005490
 8004948:	08004875 	.word	0x08004875

0800494c <__sfp>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	4607      	mov	r7, r0
 8004950:	f7ff ffac 	bl	80048ac <__sfp_lock_acquire>
 8004954:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <__sfp+0x84>)
 8004956:	681e      	ldr	r6, [r3, #0]
 8004958:	69b3      	ldr	r3, [r6, #24]
 800495a:	b913      	cbnz	r3, 8004962 <__sfp+0x16>
 800495c:	4630      	mov	r0, r6
 800495e:	f7ff ffbd 	bl	80048dc <__sinit>
 8004962:	3648      	adds	r6, #72	; 0x48
 8004964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004968:	3b01      	subs	r3, #1
 800496a:	d503      	bpl.n	8004974 <__sfp+0x28>
 800496c:	6833      	ldr	r3, [r6, #0]
 800496e:	b30b      	cbz	r3, 80049b4 <__sfp+0x68>
 8004970:	6836      	ldr	r6, [r6, #0]
 8004972:	e7f7      	b.n	8004964 <__sfp+0x18>
 8004974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004978:	b9d5      	cbnz	r5, 80049b0 <__sfp+0x64>
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <__sfp+0x88>)
 800497c:	60e3      	str	r3, [r4, #12]
 800497e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004982:	6665      	str	r5, [r4, #100]	; 0x64
 8004984:	f000 f847 	bl	8004a16 <__retarget_lock_init_recursive>
 8004988:	f7ff ff96 	bl	80048b8 <__sfp_lock_release>
 800498c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004994:	6025      	str	r5, [r4, #0]
 8004996:	61a5      	str	r5, [r4, #24]
 8004998:	2208      	movs	r2, #8
 800499a:	4629      	mov	r1, r5
 800499c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049a0:	f7ff fd2c 	bl	80043fc <memset>
 80049a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049ac:	4620      	mov	r0, r4
 80049ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b0:	3468      	adds	r4, #104	; 0x68
 80049b2:	e7d9      	b.n	8004968 <__sfp+0x1c>
 80049b4:	2104      	movs	r1, #4
 80049b6:	4638      	mov	r0, r7
 80049b8:	f7ff ff62 	bl	8004880 <__sfmoreglue>
 80049bc:	4604      	mov	r4, r0
 80049be:	6030      	str	r0, [r6, #0]
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d1d5      	bne.n	8004970 <__sfp+0x24>
 80049c4:	f7ff ff78 	bl	80048b8 <__sfp_lock_release>
 80049c8:	230c      	movs	r3, #12
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	e7ee      	b.n	80049ac <__sfp+0x60>
 80049ce:	bf00      	nop
 80049d0:	08005490 	.word	0x08005490
 80049d4:	ffff0001 	.word	0xffff0001

080049d8 <_fwalk_reent>:
 80049d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049dc:	4606      	mov	r6, r0
 80049de:	4688      	mov	r8, r1
 80049e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049e4:	2700      	movs	r7, #0
 80049e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049ea:	f1b9 0901 	subs.w	r9, r9, #1
 80049ee:	d505      	bpl.n	80049fc <_fwalk_reent+0x24>
 80049f0:	6824      	ldr	r4, [r4, #0]
 80049f2:	2c00      	cmp	r4, #0
 80049f4:	d1f7      	bne.n	80049e6 <_fwalk_reent+0xe>
 80049f6:	4638      	mov	r0, r7
 80049f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049fc:	89ab      	ldrh	r3, [r5, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d907      	bls.n	8004a12 <_fwalk_reent+0x3a>
 8004a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a06:	3301      	adds	r3, #1
 8004a08:	d003      	beq.n	8004a12 <_fwalk_reent+0x3a>
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	47c0      	blx	r8
 8004a10:	4307      	orrs	r7, r0
 8004a12:	3568      	adds	r5, #104	; 0x68
 8004a14:	e7e9      	b.n	80049ea <_fwalk_reent+0x12>

08004a16 <__retarget_lock_init_recursive>:
 8004a16:	4770      	bx	lr

08004a18 <__retarget_lock_acquire_recursive>:
 8004a18:	4770      	bx	lr

08004a1a <__retarget_lock_release_recursive>:
 8004a1a:	4770      	bx	lr

08004a1c <__swhatbuf_r>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	460e      	mov	r6, r1
 8004a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a24:	2900      	cmp	r1, #0
 8004a26:	b096      	sub	sp, #88	; 0x58
 8004a28:	4614      	mov	r4, r2
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	da07      	bge.n	8004a3e <__swhatbuf_r+0x22>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	89b3      	ldrh	r3, [r6, #12]
 8004a34:	061a      	lsls	r2, r3, #24
 8004a36:	d410      	bmi.n	8004a5a <__swhatbuf_r+0x3e>
 8004a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3c:	e00e      	b.n	8004a5c <__swhatbuf_r+0x40>
 8004a3e:	466a      	mov	r2, sp
 8004a40:	f000 fc5e 	bl	8005300 <_fstat_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	dbf2      	blt.n	8004a2e <__swhatbuf_r+0x12>
 8004a48:	9a01      	ldr	r2, [sp, #4]
 8004a4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a52:	425a      	negs	r2, r3
 8004a54:	415a      	adcs	r2, r3
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	e7ee      	b.n	8004a38 <__swhatbuf_r+0x1c>
 8004a5a:	2340      	movs	r3, #64	; 0x40
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	b016      	add	sp, #88	; 0x58
 8004a62:	bd70      	pop	{r4, r5, r6, pc}

08004a64 <__smakebuf_r>:
 8004a64:	898b      	ldrh	r3, [r1, #12]
 8004a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a68:	079d      	lsls	r5, r3, #30
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	d507      	bpl.n	8004a80 <__smakebuf_r+0x1c>
 8004a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	2301      	movs	r3, #1
 8004a7a:	6163      	str	r3, [r4, #20]
 8004a7c:	b002      	add	sp, #8
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	ab01      	add	r3, sp, #4
 8004a82:	466a      	mov	r2, sp
 8004a84:	f7ff ffca 	bl	8004a1c <__swhatbuf_r>
 8004a88:	9900      	ldr	r1, [sp, #0]
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f000 f879 	bl	8004b84 <_malloc_r>
 8004a92:	b948      	cbnz	r0, 8004aa8 <__smakebuf_r+0x44>
 8004a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a98:	059a      	lsls	r2, r3, #22
 8004a9a:	d4ef      	bmi.n	8004a7c <__smakebuf_r+0x18>
 8004a9c:	f023 0303 	bic.w	r3, r3, #3
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	81a3      	strh	r3, [r4, #12]
 8004aa6:	e7e3      	b.n	8004a70 <__smakebuf_r+0xc>
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <__smakebuf_r+0x7c>)
 8004aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	6020      	str	r0, [r4, #0]
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	9b00      	ldr	r3, [sp, #0]
 8004ab8:	6163      	str	r3, [r4, #20]
 8004aba:	9b01      	ldr	r3, [sp, #4]
 8004abc:	6120      	str	r0, [r4, #16]
 8004abe:	b15b      	cbz	r3, 8004ad8 <__smakebuf_r+0x74>
 8004ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 fc2d 	bl	8005324 <_isatty_r>
 8004aca:	b128      	cbz	r0, 8004ad8 <__smakebuf_r+0x74>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	89a0      	ldrh	r0, [r4, #12]
 8004ada:	4305      	orrs	r5, r0
 8004adc:	81a5      	strh	r5, [r4, #12]
 8004ade:	e7cd      	b.n	8004a7c <__smakebuf_r+0x18>
 8004ae0:	08004875 	.word	0x08004875

08004ae4 <_free_r>:
 8004ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d048      	beq.n	8004b7c <_free_r+0x98>
 8004aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aee:	9001      	str	r0, [sp, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f1a1 0404 	sub.w	r4, r1, #4
 8004af6:	bfb8      	it	lt
 8004af8:	18e4      	addlt	r4, r4, r3
 8004afa:	f000 fc35 	bl	8005368 <__malloc_lock>
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <_free_r+0x9c>)
 8004b00:	9801      	ldr	r0, [sp, #4]
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	4615      	mov	r5, r2
 8004b06:	b933      	cbnz	r3, 8004b16 <_free_r+0x32>
 8004b08:	6063      	str	r3, [r4, #4]
 8004b0a:	6014      	str	r4, [r2, #0]
 8004b0c:	b003      	add	sp, #12
 8004b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b12:	f000 bc2f 	b.w	8005374 <__malloc_unlock>
 8004b16:	42a3      	cmp	r3, r4
 8004b18:	d90b      	bls.n	8004b32 <_free_r+0x4e>
 8004b1a:	6821      	ldr	r1, [r4, #0]
 8004b1c:	1862      	adds	r2, r4, r1
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	bf04      	itt	eq
 8004b22:	681a      	ldreq	r2, [r3, #0]
 8004b24:	685b      	ldreq	r3, [r3, #4]
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	bf04      	itt	eq
 8004b2a:	1852      	addeq	r2, r2, r1
 8004b2c:	6022      	streq	r2, [r4, #0]
 8004b2e:	602c      	str	r4, [r5, #0]
 8004b30:	e7ec      	b.n	8004b0c <_free_r+0x28>
 8004b32:	461a      	mov	r2, r3
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	b10b      	cbz	r3, 8004b3c <_free_r+0x58>
 8004b38:	42a3      	cmp	r3, r4
 8004b3a:	d9fa      	bls.n	8004b32 <_free_r+0x4e>
 8004b3c:	6811      	ldr	r1, [r2, #0]
 8004b3e:	1855      	adds	r5, r2, r1
 8004b40:	42a5      	cmp	r5, r4
 8004b42:	d10b      	bne.n	8004b5c <_free_r+0x78>
 8004b44:	6824      	ldr	r4, [r4, #0]
 8004b46:	4421      	add	r1, r4
 8004b48:	1854      	adds	r4, r2, r1
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	d1dd      	bne.n	8004b0c <_free_r+0x28>
 8004b50:	681c      	ldr	r4, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6053      	str	r3, [r2, #4]
 8004b56:	4421      	add	r1, r4
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	e7d7      	b.n	8004b0c <_free_r+0x28>
 8004b5c:	d902      	bls.n	8004b64 <_free_r+0x80>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	6003      	str	r3, [r0, #0]
 8004b62:	e7d3      	b.n	8004b0c <_free_r+0x28>
 8004b64:	6825      	ldr	r5, [r4, #0]
 8004b66:	1961      	adds	r1, r4, r5
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	bf04      	itt	eq
 8004b6c:	6819      	ldreq	r1, [r3, #0]
 8004b6e:	685b      	ldreq	r3, [r3, #4]
 8004b70:	6063      	str	r3, [r4, #4]
 8004b72:	bf04      	itt	eq
 8004b74:	1949      	addeq	r1, r1, r5
 8004b76:	6021      	streq	r1, [r4, #0]
 8004b78:	6054      	str	r4, [r2, #4]
 8004b7a:	e7c7      	b.n	8004b0c <_free_r+0x28>
 8004b7c:	b003      	add	sp, #12
 8004b7e:	bd30      	pop	{r4, r5, pc}
 8004b80:	200049ac 	.word	0x200049ac

08004b84 <_malloc_r>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	1ccd      	adds	r5, r1, #3
 8004b88:	f025 0503 	bic.w	r5, r5, #3
 8004b8c:	3508      	adds	r5, #8
 8004b8e:	2d0c      	cmp	r5, #12
 8004b90:	bf38      	it	cc
 8004b92:	250c      	movcc	r5, #12
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	4606      	mov	r6, r0
 8004b98:	db01      	blt.n	8004b9e <_malloc_r+0x1a>
 8004b9a:	42a9      	cmp	r1, r5
 8004b9c:	d903      	bls.n	8004ba6 <_malloc_r+0x22>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	6033      	str	r3, [r6, #0]
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba6:	f000 fbdf 	bl	8005368 <__malloc_lock>
 8004baa:	4921      	ldr	r1, [pc, #132]	; (8004c30 <_malloc_r+0xac>)
 8004bac:	680a      	ldr	r2, [r1, #0]
 8004bae:	4614      	mov	r4, r2
 8004bb0:	b99c      	cbnz	r4, 8004bda <_malloc_r+0x56>
 8004bb2:	4f20      	ldr	r7, [pc, #128]	; (8004c34 <_malloc_r+0xb0>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	b923      	cbnz	r3, 8004bc2 <_malloc_r+0x3e>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f000 fb2a 	bl	8005214 <_sbrk_r>
 8004bc0:	6038      	str	r0, [r7, #0]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 fb25 	bl	8005214 <_sbrk_r>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	d123      	bne.n	8004c16 <_malloc_r+0x92>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 fbce 	bl	8005374 <__malloc_unlock>
 8004bd8:	e7e3      	b.n	8004ba2 <_malloc_r+0x1e>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	1b5b      	subs	r3, r3, r5
 8004bde:	d417      	bmi.n	8004c10 <_malloc_r+0x8c>
 8004be0:	2b0b      	cmp	r3, #11
 8004be2:	d903      	bls.n	8004bec <_malloc_r+0x68>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	441c      	add	r4, r3
 8004be8:	6025      	str	r5, [r4, #0]
 8004bea:	e004      	b.n	8004bf6 <_malloc_r+0x72>
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	42a2      	cmp	r2, r4
 8004bf0:	bf0c      	ite	eq
 8004bf2:	600b      	streq	r3, [r1, #0]
 8004bf4:	6053      	strne	r3, [r2, #4]
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 fbbc 	bl	8005374 <__malloc_unlock>
 8004bfc:	f104 000b 	add.w	r0, r4, #11
 8004c00:	1d23      	adds	r3, r4, #4
 8004c02:	f020 0007 	bic.w	r0, r0, #7
 8004c06:	1ac2      	subs	r2, r0, r3
 8004c08:	d0cc      	beq.n	8004ba4 <_malloc_r+0x20>
 8004c0a:	1a1b      	subs	r3, r3, r0
 8004c0c:	50a3      	str	r3, [r4, r2]
 8004c0e:	e7c9      	b.n	8004ba4 <_malloc_r+0x20>
 8004c10:	4622      	mov	r2, r4
 8004c12:	6864      	ldr	r4, [r4, #4]
 8004c14:	e7cc      	b.n	8004bb0 <_malloc_r+0x2c>
 8004c16:	1cc4      	adds	r4, r0, #3
 8004c18:	f024 0403 	bic.w	r4, r4, #3
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d0e3      	beq.n	8004be8 <_malloc_r+0x64>
 8004c20:	1a21      	subs	r1, r4, r0
 8004c22:	4630      	mov	r0, r6
 8004c24:	f000 faf6 	bl	8005214 <_sbrk_r>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d1dd      	bne.n	8004be8 <_malloc_r+0x64>
 8004c2c:	e7cf      	b.n	8004bce <_malloc_r+0x4a>
 8004c2e:	bf00      	nop
 8004c30:	200049ac 	.word	0x200049ac
 8004c34:	200049b0 	.word	0x200049b0

08004c38 <__sfputc_r>:
 8004c38:	6893      	ldr	r3, [r2, #8]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	b410      	push	{r4}
 8004c40:	6093      	str	r3, [r2, #8]
 8004c42:	da08      	bge.n	8004c56 <__sfputc_r+0x1e>
 8004c44:	6994      	ldr	r4, [r2, #24]
 8004c46:	42a3      	cmp	r3, r4
 8004c48:	db01      	blt.n	8004c4e <__sfputc_r+0x16>
 8004c4a:	290a      	cmp	r1, #10
 8004c4c:	d103      	bne.n	8004c56 <__sfputc_r+0x1e>
 8004c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c52:	f7ff bc69 	b.w	8004528 <__swbuf_r>
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	1c58      	adds	r0, r3, #1
 8004c5a:	6010      	str	r0, [r2, #0]
 8004c5c:	7019      	strb	r1, [r3, #0]
 8004c5e:	4608      	mov	r0, r1
 8004c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <__sfputs_r>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4606      	mov	r6, r0
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	18d5      	adds	r5, r2, r3
 8004c70:	42ac      	cmp	r4, r5
 8004c72:	d101      	bne.n	8004c78 <__sfputs_r+0x12>
 8004c74:	2000      	movs	r0, #0
 8004c76:	e007      	b.n	8004c88 <__sfputs_r+0x22>
 8004c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7c:	463a      	mov	r2, r7
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f7ff ffda 	bl	8004c38 <__sfputc_r>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d1f3      	bne.n	8004c70 <__sfputs_r+0xa>
 8004c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c8c <_vfiprintf_r>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	460d      	mov	r5, r1
 8004c92:	b09d      	sub	sp, #116	; 0x74
 8004c94:	4614      	mov	r4, r2
 8004c96:	4698      	mov	r8, r3
 8004c98:	4606      	mov	r6, r0
 8004c9a:	b118      	cbz	r0, 8004ca4 <_vfiprintf_r+0x18>
 8004c9c:	6983      	ldr	r3, [r0, #24]
 8004c9e:	b90b      	cbnz	r3, 8004ca4 <_vfiprintf_r+0x18>
 8004ca0:	f7ff fe1c 	bl	80048dc <__sinit>
 8004ca4:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <_vfiprintf_r+0x240>)
 8004ca6:	429d      	cmp	r5, r3
 8004ca8:	d11b      	bne.n	8004ce2 <_vfiprintf_r+0x56>
 8004caa:	6875      	ldr	r5, [r6, #4]
 8004cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cae:	07d9      	lsls	r1, r3, #31
 8004cb0:	d405      	bmi.n	8004cbe <_vfiprintf_r+0x32>
 8004cb2:	89ab      	ldrh	r3, [r5, #12]
 8004cb4:	059a      	lsls	r2, r3, #22
 8004cb6:	d402      	bmi.n	8004cbe <_vfiprintf_r+0x32>
 8004cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cba:	f7ff fead 	bl	8004a18 <__retarget_lock_acquire_recursive>
 8004cbe:	89ab      	ldrh	r3, [r5, #12]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	d501      	bpl.n	8004cc8 <_vfiprintf_r+0x3c>
 8004cc4:	692b      	ldr	r3, [r5, #16]
 8004cc6:	b9eb      	cbnz	r3, 8004d04 <_vfiprintf_r+0x78>
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f7ff fc7e 	bl	80045cc <__swsetup_r>
 8004cd0:	b1c0      	cbz	r0, 8004d04 <_vfiprintf_r+0x78>
 8004cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cd4:	07dc      	lsls	r4, r3, #31
 8004cd6:	d50e      	bpl.n	8004cf6 <_vfiprintf_r+0x6a>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	b01d      	add	sp, #116	; 0x74
 8004cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	; (8004ed0 <_vfiprintf_r+0x244>)
 8004ce4:	429d      	cmp	r5, r3
 8004ce6:	d101      	bne.n	8004cec <_vfiprintf_r+0x60>
 8004ce8:	68b5      	ldr	r5, [r6, #8]
 8004cea:	e7df      	b.n	8004cac <_vfiprintf_r+0x20>
 8004cec:	4b79      	ldr	r3, [pc, #484]	; (8004ed4 <_vfiprintf_r+0x248>)
 8004cee:	429d      	cmp	r5, r3
 8004cf0:	bf08      	it	eq
 8004cf2:	68f5      	ldreq	r5, [r6, #12]
 8004cf4:	e7da      	b.n	8004cac <_vfiprintf_r+0x20>
 8004cf6:	89ab      	ldrh	r3, [r5, #12]
 8004cf8:	0598      	lsls	r0, r3, #22
 8004cfa:	d4ed      	bmi.n	8004cd8 <_vfiprintf_r+0x4c>
 8004cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cfe:	f7ff fe8c 	bl	8004a1a <__retarget_lock_release_recursive>
 8004d02:	e7e9      	b.n	8004cd8 <_vfiprintf_r+0x4c>
 8004d04:	2300      	movs	r3, #0
 8004d06:	9309      	str	r3, [sp, #36]	; 0x24
 8004d08:	2320      	movs	r3, #32
 8004d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d12:	2330      	movs	r3, #48	; 0x30
 8004d14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ed8 <_vfiprintf_r+0x24c>
 8004d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d1c:	f04f 0901 	mov.w	r9, #1
 8004d20:	4623      	mov	r3, r4
 8004d22:	469a      	mov	sl, r3
 8004d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d28:	b10a      	cbz	r2, 8004d2e <_vfiprintf_r+0xa2>
 8004d2a:	2a25      	cmp	r2, #37	; 0x25
 8004d2c:	d1f9      	bne.n	8004d22 <_vfiprintf_r+0x96>
 8004d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d32:	d00b      	beq.n	8004d4c <_vfiprintf_r+0xc0>
 8004d34:	465b      	mov	r3, fp
 8004d36:	4622      	mov	r2, r4
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f7ff ff93 	bl	8004c66 <__sfputs_r>
 8004d40:	3001      	adds	r0, #1
 8004d42:	f000 80aa 	beq.w	8004e9a <_vfiprintf_r+0x20e>
 8004d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d48:	445a      	add	r2, fp
 8004d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80a2 	beq.w	8004e9a <_vfiprintf_r+0x20e>
 8004d56:	2300      	movs	r3, #0
 8004d58:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d60:	f10a 0a01 	add.w	sl, sl, #1
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	9307      	str	r3, [sp, #28]
 8004d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d6e:	4654      	mov	r4, sl
 8004d70:	2205      	movs	r2, #5
 8004d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d76:	4858      	ldr	r0, [pc, #352]	; (8004ed8 <_vfiprintf_r+0x24c>)
 8004d78:	f7fb fa62 	bl	8000240 <memchr>
 8004d7c:	9a04      	ldr	r2, [sp, #16]
 8004d7e:	b9d8      	cbnz	r0, 8004db8 <_vfiprintf_r+0x12c>
 8004d80:	06d1      	lsls	r1, r2, #27
 8004d82:	bf44      	itt	mi
 8004d84:	2320      	movmi	r3, #32
 8004d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8a:	0713      	lsls	r3, r2, #28
 8004d8c:	bf44      	itt	mi
 8004d8e:	232b      	movmi	r3, #43	; 0x2b
 8004d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d94:	f89a 3000 	ldrb.w	r3, [sl]
 8004d98:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9a:	d015      	beq.n	8004dc8 <_vfiprintf_r+0x13c>
 8004d9c:	9a07      	ldr	r2, [sp, #28]
 8004d9e:	4654      	mov	r4, sl
 8004da0:	2000      	movs	r0, #0
 8004da2:	f04f 0c0a 	mov.w	ip, #10
 8004da6:	4621      	mov	r1, r4
 8004da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dac:	3b30      	subs	r3, #48	; 0x30
 8004dae:	2b09      	cmp	r3, #9
 8004db0:	d94e      	bls.n	8004e50 <_vfiprintf_r+0x1c4>
 8004db2:	b1b0      	cbz	r0, 8004de2 <_vfiprintf_r+0x156>
 8004db4:	9207      	str	r2, [sp, #28]
 8004db6:	e014      	b.n	8004de2 <_vfiprintf_r+0x156>
 8004db8:	eba0 0308 	sub.w	r3, r0, r8
 8004dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	46a2      	mov	sl, r4
 8004dc6:	e7d2      	b.n	8004d6e <_vfiprintf_r+0xe2>
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	1d19      	adds	r1, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	9103      	str	r1, [sp, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bfbb      	ittet	lt
 8004dd4:	425b      	neglt	r3, r3
 8004dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8004dda:	9307      	strge	r3, [sp, #28]
 8004ddc:	9307      	strlt	r3, [sp, #28]
 8004dde:	bfb8      	it	lt
 8004de0:	9204      	strlt	r2, [sp, #16]
 8004de2:	7823      	ldrb	r3, [r4, #0]
 8004de4:	2b2e      	cmp	r3, #46	; 0x2e
 8004de6:	d10c      	bne.n	8004e02 <_vfiprintf_r+0x176>
 8004de8:	7863      	ldrb	r3, [r4, #1]
 8004dea:	2b2a      	cmp	r3, #42	; 0x2a
 8004dec:	d135      	bne.n	8004e5a <_vfiprintf_r+0x1ce>
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	1d1a      	adds	r2, r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	9203      	str	r2, [sp, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bfb8      	it	lt
 8004dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dfe:	3402      	adds	r4, #2
 8004e00:	9305      	str	r3, [sp, #20]
 8004e02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ee8 <_vfiprintf_r+0x25c>
 8004e06:	7821      	ldrb	r1, [r4, #0]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	4650      	mov	r0, sl
 8004e0c:	f7fb fa18 	bl	8000240 <memchr>
 8004e10:	b140      	cbz	r0, 8004e24 <_vfiprintf_r+0x198>
 8004e12:	2340      	movs	r3, #64	; 0x40
 8004e14:	eba0 000a 	sub.w	r0, r0, sl
 8004e18:	fa03 f000 	lsl.w	r0, r3, r0
 8004e1c:	9b04      	ldr	r3, [sp, #16]
 8004e1e:	4303      	orrs	r3, r0
 8004e20:	3401      	adds	r4, #1
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e28:	482c      	ldr	r0, [pc, #176]	; (8004edc <_vfiprintf_r+0x250>)
 8004e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e2e:	2206      	movs	r2, #6
 8004e30:	f7fb fa06 	bl	8000240 <memchr>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d03f      	beq.n	8004eb8 <_vfiprintf_r+0x22c>
 8004e38:	4b29      	ldr	r3, [pc, #164]	; (8004ee0 <_vfiprintf_r+0x254>)
 8004e3a:	bb1b      	cbnz	r3, 8004e84 <_vfiprintf_r+0x1f8>
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	3307      	adds	r3, #7
 8004e40:	f023 0307 	bic.w	r3, r3, #7
 8004e44:	3308      	adds	r3, #8
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4a:	443b      	add	r3, r7
 8004e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4e:	e767      	b.n	8004d20 <_vfiprintf_r+0x94>
 8004e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e54:	460c      	mov	r4, r1
 8004e56:	2001      	movs	r0, #1
 8004e58:	e7a5      	b.n	8004da6 <_vfiprintf_r+0x11a>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	3401      	adds	r4, #1
 8004e5e:	9305      	str	r3, [sp, #20]
 8004e60:	4619      	mov	r1, r3
 8004e62:	f04f 0c0a 	mov.w	ip, #10
 8004e66:	4620      	mov	r0, r4
 8004e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e6c:	3a30      	subs	r2, #48	; 0x30
 8004e6e:	2a09      	cmp	r2, #9
 8004e70:	d903      	bls.n	8004e7a <_vfiprintf_r+0x1ee>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0c5      	beq.n	8004e02 <_vfiprintf_r+0x176>
 8004e76:	9105      	str	r1, [sp, #20]
 8004e78:	e7c3      	b.n	8004e02 <_vfiprintf_r+0x176>
 8004e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e7e:	4604      	mov	r4, r0
 8004e80:	2301      	movs	r3, #1
 8004e82:	e7f0      	b.n	8004e66 <_vfiprintf_r+0x1da>
 8004e84:	ab03      	add	r3, sp, #12
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <_vfiprintf_r+0x258>)
 8004e8c:	a904      	add	r1, sp, #16
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f3af 8000 	nop.w
 8004e94:	4607      	mov	r7, r0
 8004e96:	1c78      	adds	r0, r7, #1
 8004e98:	d1d6      	bne.n	8004e48 <_vfiprintf_r+0x1bc>
 8004e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e9c:	07d9      	lsls	r1, r3, #31
 8004e9e:	d405      	bmi.n	8004eac <_vfiprintf_r+0x220>
 8004ea0:	89ab      	ldrh	r3, [r5, #12]
 8004ea2:	059a      	lsls	r2, r3, #22
 8004ea4:	d402      	bmi.n	8004eac <_vfiprintf_r+0x220>
 8004ea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ea8:	f7ff fdb7 	bl	8004a1a <__retarget_lock_release_recursive>
 8004eac:	89ab      	ldrh	r3, [r5, #12]
 8004eae:	065b      	lsls	r3, r3, #25
 8004eb0:	f53f af12 	bmi.w	8004cd8 <_vfiprintf_r+0x4c>
 8004eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eb6:	e711      	b.n	8004cdc <_vfiprintf_r+0x50>
 8004eb8:	ab03      	add	r3, sp, #12
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	462a      	mov	r2, r5
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <_vfiprintf_r+0x258>)
 8004ec0:	a904      	add	r1, sp, #16
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f000 f880 	bl	8004fc8 <_printf_i>
 8004ec8:	e7e4      	b.n	8004e94 <_vfiprintf_r+0x208>
 8004eca:	bf00      	nop
 8004ecc:	080054b4 	.word	0x080054b4
 8004ed0:	080054d4 	.word	0x080054d4
 8004ed4:	08005494 	.word	0x08005494
 8004ed8:	080054f4 	.word	0x080054f4
 8004edc:	080054fe 	.word	0x080054fe
 8004ee0:	00000000 	.word	0x00000000
 8004ee4:	08004c67 	.word	0x08004c67
 8004ee8:	080054fa 	.word	0x080054fa

08004eec <_printf_common>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	4616      	mov	r6, r2
 8004ef2:	4699      	mov	r9, r3
 8004ef4:	688a      	ldr	r2, [r1, #8]
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bfb8      	it	lt
 8004f00:	4613      	movlt	r3, r2
 8004f02:	6033      	str	r3, [r6, #0]
 8004f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f08:	4607      	mov	r7, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	b10a      	cbz	r2, 8004f12 <_printf_common+0x26>
 8004f0e:	3301      	adds	r3, #1
 8004f10:	6033      	str	r3, [r6, #0]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	0699      	lsls	r1, r3, #26
 8004f16:	bf42      	ittt	mi
 8004f18:	6833      	ldrmi	r3, [r6, #0]
 8004f1a:	3302      	addmi	r3, #2
 8004f1c:	6033      	strmi	r3, [r6, #0]
 8004f1e:	6825      	ldr	r5, [r4, #0]
 8004f20:	f015 0506 	ands.w	r5, r5, #6
 8004f24:	d106      	bne.n	8004f34 <_printf_common+0x48>
 8004f26:	f104 0a19 	add.w	sl, r4, #25
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	6832      	ldr	r2, [r6, #0]
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dc26      	bgt.n	8004f82 <_printf_common+0x96>
 8004f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f38:	1e13      	subs	r3, r2, #0
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	bf18      	it	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	0692      	lsls	r2, r2, #26
 8004f42:	d42b      	bmi.n	8004f9c <_printf_common+0xb0>
 8004f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f48:	4649      	mov	r1, r9
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	47c0      	blx	r8
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d01e      	beq.n	8004f90 <_printf_common+0xa4>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	68e5      	ldr	r5, [r4, #12]
 8004f56:	6832      	ldr	r2, [r6, #0]
 8004f58:	f003 0306 	and.w	r3, r3, #6
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	bf08      	it	eq
 8004f60:	1aad      	subeq	r5, r5, r2
 8004f62:	68a3      	ldr	r3, [r4, #8]
 8004f64:	6922      	ldr	r2, [r4, #16]
 8004f66:	bf0c      	ite	eq
 8004f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f6c:	2500      	movne	r5, #0
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	bfc4      	itt	gt
 8004f72:	1a9b      	subgt	r3, r3, r2
 8004f74:	18ed      	addgt	r5, r5, r3
 8004f76:	2600      	movs	r6, #0
 8004f78:	341a      	adds	r4, #26
 8004f7a:	42b5      	cmp	r5, r6
 8004f7c:	d11a      	bne.n	8004fb4 <_printf_common+0xc8>
 8004f7e:	2000      	movs	r0, #0
 8004f80:	e008      	b.n	8004f94 <_printf_common+0xa8>
 8004f82:	2301      	movs	r3, #1
 8004f84:	4652      	mov	r2, sl
 8004f86:	4649      	mov	r1, r9
 8004f88:	4638      	mov	r0, r7
 8004f8a:	47c0      	blx	r8
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d103      	bne.n	8004f98 <_printf_common+0xac>
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f98:	3501      	adds	r5, #1
 8004f9a:	e7c6      	b.n	8004f2a <_printf_common+0x3e>
 8004f9c:	18e1      	adds	r1, r4, r3
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	2030      	movs	r0, #48	; 0x30
 8004fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fa6:	4422      	add	r2, r4
 8004fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	e7c7      	b.n	8004f44 <_printf_common+0x58>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	4649      	mov	r1, r9
 8004fba:	4638      	mov	r0, r7
 8004fbc:	47c0      	blx	r8
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d0e6      	beq.n	8004f90 <_printf_common+0xa4>
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7d9      	b.n	8004f7a <_printf_common+0x8e>
	...

08004fc8 <_printf_i>:
 8004fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	460c      	mov	r4, r1
 8004fce:	4691      	mov	r9, r2
 8004fd0:	7e27      	ldrb	r7, [r4, #24]
 8004fd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fd4:	2f78      	cmp	r7, #120	; 0x78
 8004fd6:	4680      	mov	r8, r0
 8004fd8:	469a      	mov	sl, r3
 8004fda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fde:	d807      	bhi.n	8004ff0 <_printf_i+0x28>
 8004fe0:	2f62      	cmp	r7, #98	; 0x62
 8004fe2:	d80a      	bhi.n	8004ffa <_printf_i+0x32>
 8004fe4:	2f00      	cmp	r7, #0
 8004fe6:	f000 80d8 	beq.w	800519a <_printf_i+0x1d2>
 8004fea:	2f58      	cmp	r7, #88	; 0x58
 8004fec:	f000 80a3 	beq.w	8005136 <_printf_i+0x16e>
 8004ff0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ff8:	e03a      	b.n	8005070 <_printf_i+0xa8>
 8004ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ffe:	2b15      	cmp	r3, #21
 8005000:	d8f6      	bhi.n	8004ff0 <_printf_i+0x28>
 8005002:	a001      	add	r0, pc, #4	; (adr r0, 8005008 <_printf_i+0x40>)
 8005004:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005008:	08005061 	.word	0x08005061
 800500c:	08005075 	.word	0x08005075
 8005010:	08004ff1 	.word	0x08004ff1
 8005014:	08004ff1 	.word	0x08004ff1
 8005018:	08004ff1 	.word	0x08004ff1
 800501c:	08004ff1 	.word	0x08004ff1
 8005020:	08005075 	.word	0x08005075
 8005024:	08004ff1 	.word	0x08004ff1
 8005028:	08004ff1 	.word	0x08004ff1
 800502c:	08004ff1 	.word	0x08004ff1
 8005030:	08004ff1 	.word	0x08004ff1
 8005034:	08005181 	.word	0x08005181
 8005038:	080050a5 	.word	0x080050a5
 800503c:	08005163 	.word	0x08005163
 8005040:	08004ff1 	.word	0x08004ff1
 8005044:	08004ff1 	.word	0x08004ff1
 8005048:	080051a3 	.word	0x080051a3
 800504c:	08004ff1 	.word	0x08004ff1
 8005050:	080050a5 	.word	0x080050a5
 8005054:	08004ff1 	.word	0x08004ff1
 8005058:	08004ff1 	.word	0x08004ff1
 800505c:	0800516b 	.word	0x0800516b
 8005060:	680b      	ldr	r3, [r1, #0]
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	600a      	str	r2, [r1, #0]
 8005068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800506c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005070:	2301      	movs	r3, #1
 8005072:	e0a3      	b.n	80051bc <_printf_i+0x1f4>
 8005074:	6825      	ldr	r5, [r4, #0]
 8005076:	6808      	ldr	r0, [r1, #0]
 8005078:	062e      	lsls	r6, r5, #24
 800507a:	f100 0304 	add.w	r3, r0, #4
 800507e:	d50a      	bpl.n	8005096 <_printf_i+0xce>
 8005080:	6805      	ldr	r5, [r0, #0]
 8005082:	600b      	str	r3, [r1, #0]
 8005084:	2d00      	cmp	r5, #0
 8005086:	da03      	bge.n	8005090 <_printf_i+0xc8>
 8005088:	232d      	movs	r3, #45	; 0x2d
 800508a:	426d      	negs	r5, r5
 800508c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005090:	485e      	ldr	r0, [pc, #376]	; (800520c <_printf_i+0x244>)
 8005092:	230a      	movs	r3, #10
 8005094:	e019      	b.n	80050ca <_printf_i+0x102>
 8005096:	f015 0f40 	tst.w	r5, #64	; 0x40
 800509a:	6805      	ldr	r5, [r0, #0]
 800509c:	600b      	str	r3, [r1, #0]
 800509e:	bf18      	it	ne
 80050a0:	b22d      	sxthne	r5, r5
 80050a2:	e7ef      	b.n	8005084 <_printf_i+0xbc>
 80050a4:	680b      	ldr	r3, [r1, #0]
 80050a6:	6825      	ldr	r5, [r4, #0]
 80050a8:	1d18      	adds	r0, r3, #4
 80050aa:	6008      	str	r0, [r1, #0]
 80050ac:	0628      	lsls	r0, r5, #24
 80050ae:	d501      	bpl.n	80050b4 <_printf_i+0xec>
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	e002      	b.n	80050ba <_printf_i+0xf2>
 80050b4:	0669      	lsls	r1, r5, #25
 80050b6:	d5fb      	bpl.n	80050b0 <_printf_i+0xe8>
 80050b8:	881d      	ldrh	r5, [r3, #0]
 80050ba:	4854      	ldr	r0, [pc, #336]	; (800520c <_printf_i+0x244>)
 80050bc:	2f6f      	cmp	r7, #111	; 0x6f
 80050be:	bf0c      	ite	eq
 80050c0:	2308      	moveq	r3, #8
 80050c2:	230a      	movne	r3, #10
 80050c4:	2100      	movs	r1, #0
 80050c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ca:	6866      	ldr	r6, [r4, #4]
 80050cc:	60a6      	str	r6, [r4, #8]
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	bfa2      	ittt	ge
 80050d2:	6821      	ldrge	r1, [r4, #0]
 80050d4:	f021 0104 	bicge.w	r1, r1, #4
 80050d8:	6021      	strge	r1, [r4, #0]
 80050da:	b90d      	cbnz	r5, 80050e0 <_printf_i+0x118>
 80050dc:	2e00      	cmp	r6, #0
 80050de:	d04d      	beq.n	800517c <_printf_i+0x1b4>
 80050e0:	4616      	mov	r6, r2
 80050e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050e6:	fb03 5711 	mls	r7, r3, r1, r5
 80050ea:	5dc7      	ldrb	r7, [r0, r7]
 80050ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050f0:	462f      	mov	r7, r5
 80050f2:	42bb      	cmp	r3, r7
 80050f4:	460d      	mov	r5, r1
 80050f6:	d9f4      	bls.n	80050e2 <_printf_i+0x11a>
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d10b      	bne.n	8005114 <_printf_i+0x14c>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07df      	lsls	r7, r3, #31
 8005100:	d508      	bpl.n	8005114 <_printf_i+0x14c>
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	6861      	ldr	r1, [r4, #4]
 8005106:	4299      	cmp	r1, r3
 8005108:	bfde      	ittt	le
 800510a:	2330      	movle	r3, #48	; 0x30
 800510c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005110:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005114:	1b92      	subs	r2, r2, r6
 8005116:	6122      	str	r2, [r4, #16]
 8005118:	f8cd a000 	str.w	sl, [sp]
 800511c:	464b      	mov	r3, r9
 800511e:	aa03      	add	r2, sp, #12
 8005120:	4621      	mov	r1, r4
 8005122:	4640      	mov	r0, r8
 8005124:	f7ff fee2 	bl	8004eec <_printf_common>
 8005128:	3001      	adds	r0, #1
 800512a:	d14c      	bne.n	80051c6 <_printf_i+0x1fe>
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	b004      	add	sp, #16
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	4835      	ldr	r0, [pc, #212]	; (800520c <_printf_i+0x244>)
 8005138:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	680e      	ldr	r6, [r1, #0]
 8005140:	061f      	lsls	r7, r3, #24
 8005142:	f856 5b04 	ldr.w	r5, [r6], #4
 8005146:	600e      	str	r6, [r1, #0]
 8005148:	d514      	bpl.n	8005174 <_printf_i+0x1ac>
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	bf44      	itt	mi
 800514e:	f043 0320 	orrmi.w	r3, r3, #32
 8005152:	6023      	strmi	r3, [r4, #0]
 8005154:	b91d      	cbnz	r5, 800515e <_printf_i+0x196>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f023 0320 	bic.w	r3, r3, #32
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	2310      	movs	r3, #16
 8005160:	e7b0      	b.n	80050c4 <_printf_i+0xfc>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	f043 0320 	orr.w	r3, r3, #32
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	2378      	movs	r3, #120	; 0x78
 800516c:	4828      	ldr	r0, [pc, #160]	; (8005210 <_printf_i+0x248>)
 800516e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005172:	e7e3      	b.n	800513c <_printf_i+0x174>
 8005174:	065e      	lsls	r6, r3, #25
 8005176:	bf48      	it	mi
 8005178:	b2ad      	uxthmi	r5, r5
 800517a:	e7e6      	b.n	800514a <_printf_i+0x182>
 800517c:	4616      	mov	r6, r2
 800517e:	e7bb      	b.n	80050f8 <_printf_i+0x130>
 8005180:	680b      	ldr	r3, [r1, #0]
 8005182:	6826      	ldr	r6, [r4, #0]
 8005184:	6960      	ldr	r0, [r4, #20]
 8005186:	1d1d      	adds	r5, r3, #4
 8005188:	600d      	str	r5, [r1, #0]
 800518a:	0635      	lsls	r5, r6, #24
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	d501      	bpl.n	8005194 <_printf_i+0x1cc>
 8005190:	6018      	str	r0, [r3, #0]
 8005192:	e002      	b.n	800519a <_printf_i+0x1d2>
 8005194:	0671      	lsls	r1, r6, #25
 8005196:	d5fb      	bpl.n	8005190 <_printf_i+0x1c8>
 8005198:	8018      	strh	r0, [r3, #0]
 800519a:	2300      	movs	r3, #0
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	4616      	mov	r6, r2
 80051a0:	e7ba      	b.n	8005118 <_printf_i+0x150>
 80051a2:	680b      	ldr	r3, [r1, #0]
 80051a4:	1d1a      	adds	r2, r3, #4
 80051a6:	600a      	str	r2, [r1, #0]
 80051a8:	681e      	ldr	r6, [r3, #0]
 80051aa:	6862      	ldr	r2, [r4, #4]
 80051ac:	2100      	movs	r1, #0
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7fb f846 	bl	8000240 <memchr>
 80051b4:	b108      	cbz	r0, 80051ba <_printf_i+0x1f2>
 80051b6:	1b80      	subs	r0, r0, r6
 80051b8:	6060      	str	r0, [r4, #4]
 80051ba:	6863      	ldr	r3, [r4, #4]
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	2300      	movs	r3, #0
 80051c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c4:	e7a8      	b.n	8005118 <_printf_i+0x150>
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	4632      	mov	r2, r6
 80051ca:	4649      	mov	r1, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	47d0      	blx	sl
 80051d0:	3001      	adds	r0, #1
 80051d2:	d0ab      	beq.n	800512c <_printf_i+0x164>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	079b      	lsls	r3, r3, #30
 80051d8:	d413      	bmi.n	8005202 <_printf_i+0x23a>
 80051da:	68e0      	ldr	r0, [r4, #12]
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	4298      	cmp	r0, r3
 80051e0:	bfb8      	it	lt
 80051e2:	4618      	movlt	r0, r3
 80051e4:	e7a4      	b.n	8005130 <_printf_i+0x168>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4632      	mov	r2, r6
 80051ea:	4649      	mov	r1, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	47d0      	blx	sl
 80051f0:	3001      	adds	r0, #1
 80051f2:	d09b      	beq.n	800512c <_printf_i+0x164>
 80051f4:	3501      	adds	r5, #1
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	9903      	ldr	r1, [sp, #12]
 80051fa:	1a5b      	subs	r3, r3, r1
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	dcf2      	bgt.n	80051e6 <_printf_i+0x21e>
 8005200:	e7eb      	b.n	80051da <_printf_i+0x212>
 8005202:	2500      	movs	r5, #0
 8005204:	f104 0619 	add.w	r6, r4, #25
 8005208:	e7f5      	b.n	80051f6 <_printf_i+0x22e>
 800520a:	bf00      	nop
 800520c:	08005505 	.word	0x08005505
 8005210:	08005516 	.word	0x08005516

08005214 <_sbrk_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d06      	ldr	r5, [pc, #24]	; (8005230 <_sbrk_r+0x1c>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fb fbb8 	bl	8000994 <_sbrk>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_sbrk_r+0x1a>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_sbrk_r+0x1a>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20004a0c 	.word	0x20004a0c

08005234 <__sread>:
 8005234:	b510      	push	{r4, lr}
 8005236:	460c      	mov	r4, r1
 8005238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523c:	f000 f8a0 	bl	8005380 <_read_r>
 8005240:	2800      	cmp	r0, #0
 8005242:	bfab      	itete	ge
 8005244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005246:	89a3      	ldrhlt	r3, [r4, #12]
 8005248:	181b      	addge	r3, r3, r0
 800524a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800524e:	bfac      	ite	ge
 8005250:	6563      	strge	r3, [r4, #84]	; 0x54
 8005252:	81a3      	strhlt	r3, [r4, #12]
 8005254:	bd10      	pop	{r4, pc}

08005256 <__swrite>:
 8005256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525a:	461f      	mov	r7, r3
 800525c:	898b      	ldrh	r3, [r1, #12]
 800525e:	05db      	lsls	r3, r3, #23
 8005260:	4605      	mov	r5, r0
 8005262:	460c      	mov	r4, r1
 8005264:	4616      	mov	r6, r2
 8005266:	d505      	bpl.n	8005274 <__swrite+0x1e>
 8005268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526c:	2302      	movs	r3, #2
 800526e:	2200      	movs	r2, #0
 8005270:	f000 f868 	bl	8005344 <_lseek_r>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800527a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	4632      	mov	r2, r6
 8005282:	463b      	mov	r3, r7
 8005284:	4628      	mov	r0, r5
 8005286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800528a:	f000 b817 	b.w	80052bc <_write_r>

0800528e <__sseek>:
 800528e:	b510      	push	{r4, lr}
 8005290:	460c      	mov	r4, r1
 8005292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005296:	f000 f855 	bl	8005344 <_lseek_r>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	bf15      	itete	ne
 80052a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052aa:	81a3      	strheq	r3, [r4, #12]
 80052ac:	bf18      	it	ne
 80052ae:	81a3      	strhne	r3, [r4, #12]
 80052b0:	bd10      	pop	{r4, pc}

080052b2 <__sclose>:
 80052b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b6:	f000 b813 	b.w	80052e0 <_close_r>
	...

080052bc <_write_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d07      	ldr	r5, [pc, #28]	; (80052dc <_write_r+0x20>)
 80052c0:	4604      	mov	r4, r0
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fb fb11 	bl	80008f2 <_write>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_write_r+0x1e>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_write_r+0x1e>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20004a0c 	.word	0x20004a0c

080052e0 <_close_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d06      	ldr	r5, [pc, #24]	; (80052fc <_close_r+0x1c>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	f7fb fb1d 	bl	800092a <_close>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_close_r+0x1a>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_close_r+0x1a>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20004a0c 	.word	0x20004a0c

08005300 <_fstat_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4d07      	ldr	r5, [pc, #28]	; (8005320 <_fstat_r+0x20>)
 8005304:	2300      	movs	r3, #0
 8005306:	4604      	mov	r4, r0
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	602b      	str	r3, [r5, #0]
 800530e:	f7fb fb18 	bl	8000942 <_fstat>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d102      	bne.n	800531c <_fstat_r+0x1c>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	b103      	cbz	r3, 800531c <_fstat_r+0x1c>
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	bd38      	pop	{r3, r4, r5, pc}
 800531e:	bf00      	nop
 8005320:	20004a0c 	.word	0x20004a0c

08005324 <_isatty_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d06      	ldr	r5, [pc, #24]	; (8005340 <_isatty_r+0x1c>)
 8005328:	2300      	movs	r3, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	f7fb fb17 	bl	8000962 <_isatty>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_isatty_r+0x1a>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_isatty_r+0x1a>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	20004a0c 	.word	0x20004a0c

08005344 <_lseek_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4d07      	ldr	r5, [pc, #28]	; (8005364 <_lseek_r+0x20>)
 8005348:	4604      	mov	r4, r0
 800534a:	4608      	mov	r0, r1
 800534c:	4611      	mov	r1, r2
 800534e:	2200      	movs	r2, #0
 8005350:	602a      	str	r2, [r5, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	f7fb fb10 	bl	8000978 <_lseek>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_lseek_r+0x1e>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_lseek_r+0x1e>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	20004a0c 	.word	0x20004a0c

08005368 <__malloc_lock>:
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__malloc_lock+0x8>)
 800536a:	f7ff bb55 	b.w	8004a18 <__retarget_lock_acquire_recursive>
 800536e:	bf00      	nop
 8005370:	20004a04 	.word	0x20004a04

08005374 <__malloc_unlock>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__malloc_unlock+0x8>)
 8005376:	f7ff bb50 	b.w	8004a1a <__retarget_lock_release_recursive>
 800537a:	bf00      	nop
 800537c:	20004a04 	.word	0x20004a04

08005380 <_read_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	; (80053a0 <_read_r+0x20>)
 8005384:	4604      	mov	r4, r0
 8005386:	4608      	mov	r0, r1
 8005388:	4611      	mov	r1, r2
 800538a:	2200      	movs	r2, #0
 800538c:	602a      	str	r2, [r5, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fb fa92 	bl	80008b8 <_read>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_read_r+0x1e>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_read_r+0x1e>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20004a0c 	.word	0x20004a0c

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
